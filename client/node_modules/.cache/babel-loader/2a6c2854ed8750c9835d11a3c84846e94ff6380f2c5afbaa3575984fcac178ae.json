{"ast":null,"code":"var _jsxFileName = \"C:\\\\project\\\\quinorslv\\\\quinors-app-frontend\\\\client\\\\src\\\\context\\\\AuthContext.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useReducer, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nconst initialState = {\n  isAuthenticated: false,\n  user: null,\n  loading: false,\n  error: null,\n  token: null\n};\nconst authReducer = (state, action) => {\n  switch (action.type) {\n    case 'LOGIN_START':\n    case 'REGISTER_START':\n      return {\n        ...state,\n        loading: true,\n        error: null\n      };\n    case 'LOGIN_SUCCESS':\n      return {\n        ...state,\n        isAuthenticated: true,\n        user: action.payload.user,\n        token: action.payload.token,\n        loading: false,\n        error: null\n      };\n    case 'LOGIN_FAILURE':\n    case 'REGISTER_FAILURE':\n      return {\n        ...state,\n        isAuthenticated: false,\n        user: null,\n        token: null,\n        loading: false,\n        error: action.payload\n      };\n    case 'REGISTER_SUCCESS':\n      return {\n        ...state,\n        loading: false,\n        error: null\n      };\n    case 'LOGOUT':\n      return {\n        ...state,\n        isAuthenticated: false,\n        user: null,\n        token: null,\n        loading: false,\n        error: null\n      };\n    case 'RESTORE_SESSION':\n      return {\n        ...state,\n        isAuthenticated: true,\n        user: action.payload.user,\n        token: action.payload.token,\n        loading: false\n      };\n    case 'CLEAR_ERROR':\n      return {\n        ...state,\n        error: null\n      };\n    default:\n      return state;\n  }\n};\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  var _state$user, _state$user2, _state$user3, _state$user4, _state$user5;\n  const [state, dispatch] = useReducer(authReducer, initialState);\n\n  // 페이지 로드 시 저장된 인증 정보 복원\n  useEffect(() => {\n    const token = localStorage.getItem('authToken') || sessionStorage.getItem('authToken');\n    const userInfo = localStorage.getItem('userInfo') || sessionStorage.getItem('userInfo');\n    if (token && userInfo) {\n      try {\n        const parsedUserInfo = JSON.parse(userInfo);\n        console.log('🔄 세션 복원 중 - 사용자 정보:', parsedUserInfo);\n        console.log('🔄 세션 복원 중 - tel_no 확인:', parsedUserInfo.tel_no);\n        dispatch({\n          type: 'RESTORE_SESSION',\n          payload: {\n            user: parsedUserInfo,\n            token: token\n          }\n        });\n        console.log('✅ 세션 복원 완료:', {\n          user_id: parsedUserInfo.user_id,\n          charge_name: parsedUserInfo.charge_name,\n          cust_name: parsedUserInfo.cust_name,\n          tel_no: parsedUserInfo.tel_no\n        });\n      } catch (error) {\n        console.error('❌ 세션 복원 중 오류 발생:', error);\n        localStorage.removeItem('authToken');\n        localStorage.removeItem('userInfo');\n        sessionStorage.removeItem('authToken');\n        sessionStorage.removeItem('userInfo');\n      }\n    }\n  }, []);\n\n  // 🔐 로그인 함수\n  const login = async credentials => {\n    dispatch({\n      type: 'LOGIN_START'\n    });\n    try {\n      console.log('🔐 로그인 시도 중:', {\n        user_id: credentials.username\n      });\n\n      // 서버 상태 확인\n      const healthResponse = await fetch('https://quinors-lv-backend.ngrok.io/api/health');\n      if (!healthResponse.ok) {\n        throw new Error('서버에 연결할 수 없습니다. 잠시 후 다시 시도해주세요.');\n      }\n\n      // 로그인 API 호출\n      const response = await fetch('https://quinors-lv-backend.ngrok.io/api/auth/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Accept': 'application/json'\n        },\n        body: JSON.stringify({\n          user_id: credentials.username,\n          password: credentials.password,\n          rememberMe: credentials.rememberMe || false\n        })\n      });\n      const contentType = response.headers.get('content-type');\n      if (!contentType || !contentType.includes('application/json')) {\n        throw new Error('서버에서 올바르지 않은 응답을 받았습니다. 관리자에게 문의하세요.');\n      }\n      const result = await response.json();\n      console.log('📋 로그인 API 원본 응답:', result);\n      if (response.ok && result.success) {\n        var _result$data;\n        // 🎯 사용자 정보 추출 및 정규화\n        let userData;\n        if (result.data && result.data.user) {\n          userData = result.data.user;\n        } else if (result.user) {\n          userData = result.user;\n        } else if (result.data) {\n          userData = result.data;\n        } else {\n          throw new Error('서버 응답에서 사용자 정보를 찾을 수 없습니다');\n        }\n        console.log('🔍 추출된 원본 userData:', userData);\n        console.log('🔍 원본 userData.tel_no:', userData.tel_no, typeof userData.tel_no);\n\n        // 🎯 의뢰자 정보 필드들 확실히 포함 - 수정됨\n        const normalizedUser = {\n          _id: userData._id,\n          user_id: userData.user_id,\n          // 의뢰자 정보 (API 접수용) - null 체크 개선\n          cust_name: userData.cust_name || '',\n          dept_name: userData.dept_name || '',\n          charge_name: userData.charge_name || '',\n          tel_no: userData.tel_no || '',\n          // 빈 문자열로 초기화하지 말고 실제 값 유지\n          // 기타 정보\n          role: userData.role || 'user',\n          status: userData.status || 'active',\n          department: userData.department,\n          isActive: userData.isActive !== false,\n          createdAt: userData.createdAt,\n          updatedAt: userData.updatedAt,\n          lastLoginAt: userData.lastLoginAt\n        };\n        const token = ((_result$data = result.data) === null || _result$data === void 0 ? void 0 : _result$data.token) || result.token;\n        console.log('✅ 정규화된 사용자 정보:', normalizedUser);\n        console.log('🔍 정규화 후 tel_no 확인:', {\n          original: userData.tel_no,\n          normalized: normalizedUser.tel_no,\n          type: typeof normalizedUser.tel_no,\n          length: normalizedUser.tel_no ? normalizedUser.tel_no.length : 0\n        });\n\n        // 로컬/세션 스토리지에 저장\n        const storageData = JSON.stringify(normalizedUser);\n        if (credentials.rememberMe) {\n          localStorage.setItem('authToken', token);\n          localStorage.setItem('userInfo', storageData);\n          console.log('💾 localStorage에 저장 완료');\n        } else {\n          sessionStorage.setItem('authToken', token);\n          sessionStorage.setItem('userInfo', storageData);\n          console.log('💾 sessionStorage에 저장 완료');\n        }\n\n        // 상태 업데이트\n        dispatch({\n          type: 'LOGIN_SUCCESS',\n          payload: {\n            user: normalizedUser,\n            token: token\n          }\n        });\n        console.log('✅ 로그인 성공:', {\n          user_id: normalizedUser.user_id,\n          charge_name: normalizedUser.charge_name,\n          cust_name: normalizedUser.cust_name,\n          tel_no: normalizedUser.tel_no\n        });\n        return {\n          success: true,\n          user: normalizedUser\n        };\n      } else {\n        const errorMessage = result.message || '아이디 또는 비밀번호가 올바르지 않습니다.';\n        throw new Error(errorMessage);\n      }\n    } catch (error) {\n      console.error('❌ 로그인 실패:', error);\n      let errorMessage = error.message;\n      if (error.message.includes('Failed to fetch') || error.message.includes('ERR_CONNECTION_REFUSED')) {\n        errorMessage = '서버에 연결할 수 없습니다.\\n\\n• 인터넷 연결을 확인해주세요\\n• 서버 상태를 확인해주세요\\n• 잠시 후 다시 시도해주세요';\n      } else if (error.message.includes('JSON')) {\n        errorMessage = '서버 응답 처리 중 오류가 발생했습니다.\\n관리자에게 문의해주세요.';\n      }\n      dispatch({\n        type: 'LOGIN_FAILURE',\n        payload: errorMessage\n      });\n      throw new Error(errorMessage);\n    }\n  };\n\n  // 📝 회원가입 함수\n  const register = async registerData => {\n    dispatch({\n      type: 'REGISTER_START'\n    });\n    try {\n      console.log('📝 회원가입 요청 중:', {\n        user_id: registerData.user_id\n      });\n\n      // 서버 상태 확인\n      const healthResponse = await fetch('https://quinors-lv-backend.ngrok.io/api/health');\n      if (!healthResponse.ok) {\n        throw new Error('서버에 연결할 수 없습니다. 잠시 후 다시 시도해주세요.');\n      }\n\n      // 회원가입 API 호출\n      const response = await fetch('https://quinors-lv-backend.ngrok.io/api/auth/register', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Accept': 'application/json'\n        },\n        body: JSON.stringify(registerData)\n      });\n      const contentType = response.headers.get('content-type');\n      if (!contentType || !contentType.includes('application/json')) {\n        throw new Error('서버에서 올바르지 않은 응답을 받았습니다. 관리자에게 문의하세요.');\n      }\n      const result = await response.json();\n      console.log('📋 회원가입 응답 확인:', result);\n      if (response.ok && result.success) {\n        dispatch({\n          type: 'REGISTER_SUCCESS'\n        });\n        console.log('✅ 회원가입 신청 완료:', registerData.user_id);\n        return result;\n      } else {\n        const errorMessage = result.message || '회원가입 처리 중 오류가 발생했습니다.';\n        throw new Error(errorMessage);\n      }\n    } catch (error) {\n      console.error('❌ 회원가입 실패:', error);\n      let errorMessage = error.message;\n      if (error.message.includes('Failed to fetch')) {\n        errorMessage = '서버에 연결할 수 없습니다.\\n• 인터넷 연결을 확인해주세요\\n• 잠시 후 다시 시도해주세요';\n      } else if (error.message.includes('duplicate') || error.message.includes('중복')) {\n        errorMessage = '이미 사용 중인 정보입니다.\\n다른 정보를 사용해주세요.';\n      }\n      dispatch({\n        type: 'REGISTER_FAILURE',\n        payload: errorMessage\n      });\n      throw new Error(errorMessage);\n    }\n  };\n\n  // 🚪 로그아웃 함수\n  const logout = () => {\n    localStorage.removeItem('authToken');\n    localStorage.removeItem('userInfo');\n    sessionStorage.removeItem('authToken');\n    sessionStorage.removeItem('userInfo');\n    dispatch({\n      type: 'LOGOUT'\n    });\n    console.log('🚪 로그아웃 완료');\n  };\n\n  // ❌ 에러 초기화 함수\n  const clearError = () => {\n    dispatch({\n      type: 'CLEAR_ERROR'\n    });\n  };\n\n  // Context value\n  const contextValue = {\n    // 상태\n    ...state,\n    // 함수들\n    login,\n    register,\n    logout,\n    clearError,\n    // 유틸리티\n    isLoggedIn: state.isAuthenticated && state.user && state.token,\n    userRole: ((_state$user = state.user) === null || _state$user === void 0 ? void 0 : _state$user.role) || 'user',\n    userId: ((_state$user2 = state.user) === null || _state$user2 === void 0 ? void 0 : _state$user2.user_id) || null,\n    userName: ((_state$user3 = state.user) === null || _state$user3 === void 0 ? void 0 : _state$user3.charge_name) || ((_state$user4 = state.user) === null || _state$user4 === void 0 ? void 0 : _state$user4.user_id) || null,\n    isAdmin: ((_state$user5 = state.user) === null || _state$user5 === void 0 ? void 0 : _state$user5.role) === 'admin',\n    // 🎯 의뢰자 정보 직접 접근 (API 접수용) - 수정됨\n    requesterInfo: state.user ? {\n      custName: state.user.cust_name || '',\n      deptName: state.user.dept_name || '',\n      chargeName: state.user.charge_name || '',\n      telNo: state.user.tel_no || '' // 실제 값이 있으면 그대로, 없으면 빈 문자열\n    } : null\n  };\n\n  // 디버깅용 로그 (개발환경에서만)\n  if (process.env.NODE_ENV === 'development' && state.user) {\n    console.log('🔍 AuthContext contextValue.requesterInfo:', contextValue.requesterInfo);\n  }\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: contextValue,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 355,\n    columnNumber: 5\n  }, this);\n};\n\n// Hook\n_s(AuthProvider, \"bgCdjuTOmPdSBRwTap80EFd9Y3U=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth는 AuthProvider 내부에서만 사용할 수 있습니다.');\n  }\n  return context;\n};\n_s2(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport default AuthContext;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useReducer","useEffect","jsxDEV","_jsxDEV","AuthContext","initialState","isAuthenticated","user","loading","error","token","authReducer","state","action","type","payload","AuthProvider","children","_s","_state$user","_state$user2","_state$user3","_state$user4","_state$user5","dispatch","localStorage","getItem","sessionStorage","userInfo","parsedUserInfo","JSON","parse","console","log","tel_no","user_id","charge_name","cust_name","removeItem","login","credentials","username","healthResponse","fetch","ok","Error","response","method","headers","body","stringify","password","rememberMe","contentType","get","includes","result","json","success","_result$data","userData","data","normalizedUser","_id","dept_name","role","status","department","isActive","createdAt","updatedAt","lastLoginAt","original","normalized","length","storageData","setItem","errorMessage","message","register","registerData","logout","clearError","contextValue","isLoggedIn","userRole","userId","userName","isAdmin","requesterInfo","custName","deptName","chargeName","telNo","process","env","NODE_ENV","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","context","$RefreshReg$"],"sources":["C:/project/quinorslv/quinors-app-frontend/client/src/context/AuthContext.jsx"],"sourcesContent":["import React, { createContext, useContext, useReducer, useEffect } from 'react';\r\n\r\nconst AuthContext = createContext();\r\n\r\nconst initialState = {\r\n  isAuthenticated: false,\r\n  user: null,\r\n  loading: false,\r\n  error: null,\r\n  token: null\r\n};\r\n\r\nconst authReducer = (state, action) => {\r\n  switch (action.type) {\r\n    case 'LOGIN_START':\r\n    case 'REGISTER_START':\r\n      return { ...state, loading: true, error: null };\r\n      \r\n    case 'LOGIN_SUCCESS':\r\n      return {\r\n        ...state,\r\n        isAuthenticated: true,\r\n        user: action.payload.user,\r\n        token: action.payload.token,\r\n        loading: false,\r\n        error: null\r\n      };\r\n      \r\n    case 'LOGIN_FAILURE':\r\n    case 'REGISTER_FAILURE':\r\n      return {\r\n        ...state,\r\n        isAuthenticated: false,\r\n        user: null,\r\n        token: null,\r\n        loading: false,\r\n        error: action.payload\r\n      };\r\n      \r\n    case 'REGISTER_SUCCESS':\r\n      return { ...state, loading: false, error: null };\r\n      \r\n    case 'LOGOUT':\r\n      return {\r\n        ...state,\r\n        isAuthenticated: false,\r\n        user: null,\r\n        token: null,\r\n        loading: false,\r\n        error: null\r\n      };\r\n      \r\n    case 'RESTORE_SESSION':\r\n      return {\r\n        ...state,\r\n        isAuthenticated: true,\r\n        user: action.payload.user,\r\n        token: action.payload.token,\r\n        loading: false\r\n      };\r\n      \r\n    case 'CLEAR_ERROR':\r\n      return { ...state, error: null };\r\n      \r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [state, dispatch] = useReducer(authReducer, initialState);\r\n\r\n  // 페이지 로드 시 저장된 인증 정보 복원\r\n  useEffect(() => {\r\n    const token = localStorage.getItem('authToken') || sessionStorage.getItem('authToken');\r\n    const userInfo = localStorage.getItem('userInfo') || sessionStorage.getItem('userInfo');\r\n    \r\n    if (token && userInfo) {\r\n      try {\r\n        const parsedUserInfo = JSON.parse(userInfo);\r\n        console.log('🔄 세션 복원 중 - 사용자 정보:', parsedUserInfo);\r\n        console.log('🔄 세션 복원 중 - tel_no 확인:', parsedUserInfo.tel_no);\r\n        \r\n        dispatch({\r\n          type: 'RESTORE_SESSION',\r\n          payload: {\r\n            user: parsedUserInfo,\r\n            token: token\r\n          }\r\n        });\r\n        \r\n        console.log('✅ 세션 복원 완료:', {\r\n          user_id: parsedUserInfo.user_id,\r\n          charge_name: parsedUserInfo.charge_name,\r\n          cust_name: parsedUserInfo.cust_name,\r\n          tel_no: parsedUserInfo.tel_no\r\n        });\r\n        \r\n      } catch (error) {\r\n        console.error('❌ 세션 복원 중 오류 발생:', error);\r\n        localStorage.removeItem('authToken');\r\n        localStorage.removeItem('userInfo');\r\n        sessionStorage.removeItem('authToken');\r\n        sessionStorage.removeItem('userInfo');\r\n      }\r\n    }\r\n  }, []);\r\n\r\n  // 🔐 로그인 함수\r\n  const login = async (credentials) => {\r\n    dispatch({ type: 'LOGIN_START' });\r\n    \r\n    try {\r\n      console.log('🔐 로그인 시도 중:', { user_id: credentials.username });\r\n      \r\n      // 서버 상태 확인\r\n      const healthResponse = await fetch('https://quinors-lv-backend.ngrok.io/api/health');\r\n      if (!healthResponse.ok) {\r\n        throw new Error('서버에 연결할 수 없습니다. 잠시 후 다시 시도해주세요.');\r\n      }\r\n\r\n      // 로그인 API 호출\r\n      const response = await fetch('https://quinors-lv-backend.ngrok.io/api/auth/login', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Accept': 'application/json'\r\n        },\r\n        body: JSON.stringify({\r\n          user_id: credentials.username,\r\n          password: credentials.password,\r\n          rememberMe: credentials.rememberMe || false\r\n        })\r\n      });\r\n\r\n      const contentType = response.headers.get('content-type');\r\n      if (!contentType || !contentType.includes('application/json')) {\r\n        throw new Error('서버에서 올바르지 않은 응답을 받았습니다. 관리자에게 문의하세요.');\r\n      }\r\n\r\n      const result = await response.json();\r\n      console.log('📋 로그인 API 원본 응답:', result);\r\n\r\n      if (response.ok && result.success) {\r\n        // 🎯 사용자 정보 추출 및 정규화\r\n        let userData;\r\n        \r\n        if (result.data && result.data.user) {\r\n          userData = result.data.user;\r\n        } else if (result.user) {\r\n          userData = result.user;\r\n        } else if (result.data) {\r\n          userData = result.data;\r\n        } else {\r\n          throw new Error('서버 응답에서 사용자 정보를 찾을 수 없습니다');\r\n        }\r\n\r\n        console.log('🔍 추출된 원본 userData:', userData);\r\n        console.log('🔍 원본 userData.tel_no:', userData.tel_no, typeof userData.tel_no);\r\n\r\n        // 🎯 의뢰자 정보 필드들 확실히 포함 - 수정됨\r\n        const normalizedUser = {\r\n          _id: userData._id,\r\n          user_id: userData.user_id,\r\n          // 의뢰자 정보 (API 접수용) - null 체크 개선\r\n          cust_name: userData.cust_name || '',\r\n          dept_name: userData.dept_name || '',\r\n          charge_name: userData.charge_name || '',\r\n          tel_no: userData.tel_no || '', // 빈 문자열로 초기화하지 말고 실제 값 유지\r\n          // 기타 정보\r\n          role: userData.role || 'user',\r\n          status: userData.status || 'active',\r\n          department: userData.department,\r\n          isActive: userData.isActive !== false,\r\n          createdAt: userData.createdAt,\r\n          updatedAt: userData.updatedAt,\r\n          lastLoginAt: userData.lastLoginAt\r\n        };\r\n\r\n        const token = result.data?.token || result.token;\r\n        \r\n        console.log('✅ 정규화된 사용자 정보:', normalizedUser);\r\n        console.log('🔍 정규화 후 tel_no 확인:', {\r\n          original: userData.tel_no,\r\n          normalized: normalizedUser.tel_no,\r\n          type: typeof normalizedUser.tel_no,\r\n          length: normalizedUser.tel_no ? normalizedUser.tel_no.length : 0\r\n        });\r\n\r\n        // 로컬/세션 스토리지에 저장\r\n        const storageData = JSON.stringify(normalizedUser);\r\n        \r\n        if (credentials.rememberMe) {\r\n          localStorage.setItem('authToken', token);\r\n          localStorage.setItem('userInfo', storageData);\r\n          console.log('💾 localStorage에 저장 완료');\r\n        } else {\r\n          sessionStorage.setItem('authToken', token);\r\n          sessionStorage.setItem('userInfo', storageData);\r\n          console.log('💾 sessionStorage에 저장 완료');\r\n        }\r\n\r\n        // 상태 업데이트\r\n        dispatch({\r\n          type: 'LOGIN_SUCCESS',\r\n          payload: { \r\n            user: normalizedUser, \r\n            token: token \r\n          }\r\n        });\r\n        \r\n        console.log('✅ 로그인 성공:', {\r\n          user_id: normalizedUser.user_id,\r\n          charge_name: normalizedUser.charge_name,\r\n          cust_name: normalizedUser.cust_name,\r\n          tel_no: normalizedUser.tel_no\r\n        });\r\n\r\n        return { success: true, user: normalizedUser };\r\n\r\n      } else {\r\n        const errorMessage = result.message || '아이디 또는 비밀번호가 올바르지 않습니다.';\r\n        throw new Error(errorMessage);\r\n      }\r\n\r\n    } catch (error) {\r\n      console.error('❌ 로그인 실패:', error);\r\n      \r\n      let errorMessage = error.message;\r\n      \r\n      if (error.message.includes('Failed to fetch') || error.message.includes('ERR_CONNECTION_REFUSED')) {\r\n        errorMessage = '서버에 연결할 수 없습니다.\\n\\n• 인터넷 연결을 확인해주세요\\n• 서버 상태를 확인해주세요\\n• 잠시 후 다시 시도해주세요';\r\n      } else if (error.message.includes('JSON')) {\r\n        errorMessage = '서버 응답 처리 중 오류가 발생했습니다.\\n관리자에게 문의해주세요.';\r\n      }\r\n\r\n      dispatch({\r\n        type: 'LOGIN_FAILURE',\r\n        payload: errorMessage\r\n      });\r\n      \r\n      throw new Error(errorMessage);\r\n    }\r\n  };\r\n\r\n  // 📝 회원가입 함수\r\n  const register = async (registerData) => {\r\n    dispatch({ type: 'REGISTER_START' });\r\n    \r\n    try {\r\n      console.log('📝 회원가입 요청 중:', { user_id: registerData.user_id });\r\n      \r\n      // 서버 상태 확인\r\n      const healthResponse = await fetch('https://quinors-lv-backend.ngrok.io/api/health');\r\n      if (!healthResponse.ok) {\r\n        throw new Error('서버에 연결할 수 없습니다. 잠시 후 다시 시도해주세요.');\r\n      }\r\n\r\n      // 회원가입 API 호출\r\n      const response = await fetch('https://quinors-lv-backend.ngrok.io/api/auth/register', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Accept': 'application/json'\r\n        },\r\n        body: JSON.stringify(registerData)\r\n      });\r\n\r\n      const contentType = response.headers.get('content-type');\r\n      if (!contentType || !contentType.includes('application/json')) {\r\n        throw new Error('서버에서 올바르지 않은 응답을 받았습니다. 관리자에게 문의하세요.');\r\n      }\r\n\r\n      const result = await response.json();\r\n      console.log('📋 회원가입 응답 확인:', result);\r\n\r\n      if (response.ok && result.success) {\r\n        dispatch({ type: 'REGISTER_SUCCESS' });\r\n        console.log('✅ 회원가입 신청 완료:', registerData.user_id);\r\n        return result;\r\n      } else {\r\n        const errorMessage = result.message || '회원가입 처리 중 오류가 발생했습니다.';\r\n        throw new Error(errorMessage);\r\n      }\r\n\r\n    } catch (error) {\r\n      console.error('❌ 회원가입 실패:', error);\r\n      \r\n      let errorMessage = error.message;\r\n      \r\n      if (error.message.includes('Failed to fetch')) {\r\n        errorMessage = '서버에 연결할 수 없습니다.\\n• 인터넷 연결을 확인해주세요\\n• 잠시 후 다시 시도해주세요';\r\n      } else if (error.message.includes('duplicate') || error.message.includes('중복')) {\r\n        errorMessage = '이미 사용 중인 정보입니다.\\n다른 정보를 사용해주세요.';\r\n      }\r\n\r\n      dispatch({\r\n        type: 'REGISTER_FAILURE',\r\n        payload: errorMessage\r\n      });\r\n      \r\n      throw new Error(errorMessage);\r\n    }\r\n  };\r\n\r\n  // 🚪 로그아웃 함수\r\n  const logout = () => {\r\n    localStorage.removeItem('authToken');\r\n    localStorage.removeItem('userInfo');\r\n    sessionStorage.removeItem('authToken');\r\n    sessionStorage.removeItem('userInfo');\r\n    \r\n    dispatch({ type: 'LOGOUT' });\r\n    console.log('🚪 로그아웃 완료');\r\n  };\r\n\r\n  // ❌ 에러 초기화 함수\r\n  const clearError = () => {\r\n    dispatch({ type: 'CLEAR_ERROR' });\r\n  };\r\n\r\n  // Context value\r\n  const contextValue = {\r\n    // 상태\r\n    ...state,\r\n    \r\n    // 함수들\r\n    login,\r\n    register,\r\n    logout,\r\n    clearError,\r\n    \r\n    // 유틸리티\r\n    isLoggedIn: state.isAuthenticated && state.user && state.token,\r\n    userRole: state.user?.role || 'user',\r\n    userId: state.user?.user_id || null,\r\n    userName: state.user?.charge_name || state.user?.user_id || null,\r\n    isAdmin: state.user?.role === 'admin',\r\n    \r\n    // 🎯 의뢰자 정보 직접 접근 (API 접수용) - 수정됨\r\n    requesterInfo: state.user ? {\r\n      custName: state.user.cust_name || '',\r\n      deptName: state.user.dept_name || '',\r\n      chargeName: state.user.charge_name || '',\r\n      telNo: state.user.tel_no || '' // 실제 값이 있으면 그대로, 없으면 빈 문자열\r\n    } : null\r\n  };\r\n\r\n  // 디버깅용 로그 (개발환경에서만)\r\n  if (process.env.NODE_ENV === 'development' && state.user) {\r\n    console.log('🔍 AuthContext contextValue.requesterInfo:', contextValue.requesterInfo);\r\n  }\r\n\r\n  return (\r\n    <AuthContext.Provider value={contextValue}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\n// Hook\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  if (!context) {\r\n    throw new Error('useAuth는 AuthProvider 내부에서만 사용할 수 있습니다.');\r\n  }\r\n  return context;\r\n};\r\n\r\nexport default AuthContext;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}