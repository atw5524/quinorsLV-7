{"ast":null,"code":"var _jsxFileName = \"C:\\\\project\\\\quinorslv\\\\quinors-app-frontend\\\\client\\\\src\\\\context\\\\AuthContext.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useReducer, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nconst initialState = {\n  isAuthenticated: false,\n  user: null,\n  loading: false,\n  error: null,\n  token: null\n};\nconst authReducer = (state, action) => {\n  switch (action.type) {\n    case 'LOGIN_START':\n      return {\n        ...state,\n        loading: true,\n        error: null\n      };\n    case 'LOGIN_SUCCESS':\n      return {\n        ...state,\n        isAuthenticated: true,\n        user: action.payload.user,\n        token: action.payload.token,\n        loading: false,\n        error: null\n      };\n    case 'LOGIN_FAILURE':\n      return {\n        ...state,\n        isAuthenticated: false,\n        user: null,\n        token: null,\n        loading: false,\n        error: action.payload\n      };\n    case 'LOGOUT':\n      return {\n        ...state,\n        isAuthenticated: false,\n        user: null,\n        token: null,\n        loading: false,\n        error: null\n      };\n    case 'RESTORE_SESSION':\n      return {\n        ...state,\n        isAuthenticated: true,\n        user: action.payload.user,\n        token: action.payload.token,\n        loading: false\n      };\n    case 'CLEAR_ERROR':\n      return {\n        ...state,\n        error: null\n      };\n    case 'REGISTER_START':\n      return {\n        ...state,\n        loading: true,\n        error: null\n      };\n    case 'REGISTER_SUCCESS':\n      return {\n        ...state,\n        loading: false,\n        error: null\n      };\n    case 'REGISTER_FAILURE':\n      return {\n        ...state,\n        loading: false,\n        error: action.payload\n      };\n    default:\n      return state;\n  }\n};\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  var _state$user, _state$user2, _state$user3, _state$user4;\n  const [state, dispatch] = useReducer(authReducer, initialState);\n\n  // 페이지 로드 시 저장된 인증 정보 복원\n  useEffect(() => {\n    const token = localStorage.getItem('authToken');\n    const userInfo = localStorage.getItem('userInfo');\n    if (token && userInfo) {\n      try {\n        const parsedUserInfo = JSON.parse(userInfo);\n        dispatch({\n          type: 'RESTORE_SESSION',\n          payload: {\n            user: parsedUserInfo,\n            token: token\n          }\n        });\n        console.log('✅ 세션 복원 성공:', parsedUserInfo.charge_name || parsedUserInfo.user_id);\n      } catch (error) {\n        console.error('세션 복원 오류:', error);\n        localStorage.removeItem('authToken');\n        localStorage.removeItem('userInfo');\n      }\n    }\n  }, []);\n\n  // 로그인 함수\n  const login = async credentials => {\n    dispatch({\n      type: 'LOGIN_START'\n    });\n    try {\n      console.log('🔐 로그인 시도:', {\n        userId: credentials.username\n      });\n\n      // 서버 상태 확인\n      const healthResponse = await fetch('https://quinors-lv-backend.ngrok.io/api/health');\n      if (!healthResponse.ok) {\n        throw new Error('서버에 연결할 수 없습니다.');\n      }\n\n      // 로그인 API 호출\n      const response = await fetch('https://quinors-lv-backend.ngrok.io/api/auth/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Accept': 'application/json'\n        },\n        body: JSON.stringify({\n          user_id: credentials.username,\n          // 새로운 필드명에 맞게 수정\n          password: credentials.password,\n          rememberMe: credentials.rememberMe || false\n        })\n      });\n      const contentType = response.headers.get('content-type');\n      if (!contentType || !contentType.includes('application/json')) {\n        throw new Error('서버에서 올바르지 않은 응답을 받았습니다.');\n      }\n      const result = await response.json();\n      console.log('🔐 로그인 API 응답:', result);\n      if (response.ok && result.success) {\n        const {\n          user,\n          token\n        } = result.data;\n\n        // 로컬 스토리지에 저장\n        if (credentials.rememberMe) {\n          localStorage.setItem('authToken', token);\n          localStorage.setItem('userInfo', JSON.stringify(user));\n        } else {\n          sessionStorage.setItem('authToken', token);\n          sessionStorage.setItem('userInfo', JSON.stringify(user));\n        }\n        dispatch({\n          type: 'LOGIN_SUCCESS',\n          payload: {\n            user,\n            token\n          }\n        });\n        console.log('✅ 로그인 성공:', user.charge_name || user.user_id);\n      } else {\n        throw new Error(result.message || '로그인에 실패했습니다.');\n      }\n    } catch (error) {\n      console.error('❌ 로그인 오류:', error);\n\n      // 구체적인 에러 메시지 처리\n      let errorMessage = error.message;\n      if (error.message.includes('Failed to fetch')) {\n        errorMessage = '서버에 연결할 수 없습니다. 네트워크 연결을 확인해주세요.';\n      } else if (error.message.includes('JSON')) {\n        errorMessage = '서버 응답 처리 중 오류가 발생했습니다.';\n      }\n      dispatch({\n        type: 'LOGIN_FAILURE',\n        payload: errorMessage\n      });\n      throw new Error(errorMessage);\n    }\n  };\n\n  // 회원가입 함수\n  const register = async registerData => {\n    dispatch({\n      type: 'REGISTER_START'\n    });\n    try {\n      console.log('📝 회원가입 시도:', {\n        user_id: registerData.user_id\n      });\n\n      // 서버 상태 확인\n      const healthResponse = await fetch('https://quinors-lv-backend.ngrok.io/api/health');\n      if (!healthResponse.ok) {\n        throw new Error('서버에 연결할 수 없습니다.');\n      }\n\n      // 회원가입 API 호출\n      const response = await fetch('https://quinors-lv-backend.ngrok.io/api/auth/register', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Accept': 'application/json'\n        },\n        body: JSON.stringify({\n          user_id: registerData.user_id,\n          password: registerData.password,\n          cust_name: registerData.cust_name,\n          dong_name: registerData.dong_name,\n          dong_detail: registerData.dong_detail || '',\n          dept_name: registerData.dept_name,\n          charge_name: registerData.charge_name,\n          tel_no: registerData.tel_no.replace(/[^0-9]/g, '') // 숫자만 저장\n        })\n      });\n      const contentType = response.headers.get('content-type');\n      if (!contentType || !contentType.includes('application/json')) {\n        throw new Error('서버에서 올바르지 않은 응답을 받았습니다.');\n      }\n      const result = await response.json();\n      console.log('📝 회원가입 API 응답:', result);\n      if (response.ok && result.success) {\n        dispatch({\n          type: 'REGISTER_SUCCESS'\n        });\n        console.log('✅ 회원가입 성공:', registerData.user_id);\n        return result;\n      } else {\n        throw new Error(result.message || '회원가입에 실패했습니다.');\n      }\n    } catch (error) {\n      console.error('❌ 회원가입 오류:', error);\n\n      // 구체적인 에러 메시지 처리\n      let errorMessage = error.message;\n      if (error.message.includes('Failed to fetch')) {\n        errorMessage = '서버에 연결할 수 없습니다. 네트워크 연결을 확인해주세요.';\n      } else if (error.message.includes('JSON')) {\n        errorMessage = '서버 응답 처리 중 오류가 발생했습니다.';\n      }\n      dispatch({\n        type: 'REGISTER_FAILURE',\n        payload: errorMessage\n      });\n      throw new Error(errorMessage);\n    }\n  };\n\n  // 로그아웃 함수\n  const logout = () => {\n    localStorage.removeItem('authToken');\n    localStorage.removeItem('userInfo');\n    sessionStorage.removeItem('authToken');\n    sessionStorage.removeItem('userInfo');\n    dispatch({\n      type: 'LOGOUT'\n    });\n    console.log('🚪 로그아웃 완료');\n  };\n\n  // 에러 초기화 함수\n  const clearError = () => {\n    dispatch({\n      type: 'CLEAR_ERROR'\n    });\n  };\n\n  // 비밀번호 변경 함수\n  const changePassword = async (currentPassword, newPassword) => {\n    try {\n      const token = state.token || localStorage.getItem('authToken') || sessionStorage.getItem('authToken');\n      if (!token) {\n        throw new Error('인증 토큰이 없습니다. 다시 로그인해주세요.');\n      }\n      const response = await fetch('https://quinors-lv-backend.ngrok.io/api/auth/change-password', {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${token}`\n        },\n        body: JSON.stringify({\n          currentPassword,\n          newPassword\n        })\n      });\n      const result = await response.json();\n      if (response.ok && result.success) {\n        console.log('✅ 비밀번호 변경 성공');\n        return result;\n      } else {\n        throw new Error(result.message || '비밀번호 변경에 실패했습니다.');\n      }\n    } catch (error) {\n      console.error('❌ 비밀번호 변경 오류:', error);\n      throw error;\n    }\n  };\n\n  // 사용자 정보 업데이트 함수\n  const updateUserInfo = async updateData => {\n    try {\n      const token = state.token || localStorage.getItem('authToken') || sessionStorage.getItem('authToken');\n      if (!token) {\n        throw new Error('인증 토큰이 없습니다. 다시 로그인해주세요.');\n      }\n      const response = await fetch('https://quinors-lv-backend.ngrok.io/api/auth/profile', {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${token}`\n        },\n        body: JSON.stringify(updateData)\n      });\n      const result = await response.json();\n      if (response.ok && result.success) {\n        // 업데이트된 사용자 정보를 상태에 반영\n        const updatedUser = {\n          ...state.user,\n          ...result.data\n        };\n\n        // 스토리지 업데이트\n        if (localStorage.getItem('userInfo')) {\n          localStorage.setItem('userInfo', JSON.stringify(updatedUser));\n        }\n        if (sessionStorage.getItem('userInfo')) {\n          sessionStorage.setItem('userInfo', JSON.stringify(updatedUser));\n        }\n        dispatch({\n          type: 'LOGIN_SUCCESS',\n          payload: {\n            user: updatedUser,\n            token: state.token\n          }\n        });\n        console.log('✅ 사용자 정보 업데이트 성공');\n        return result;\n      } else {\n        throw new Error(result.message || '사용자 정보 업데이트에 실패했습니다.');\n      }\n    } catch (error) {\n      console.error('❌ 사용자 정보 업데이트 오류:', error);\n      throw error;\n    }\n  };\n\n  // 토큰 유효성 검사 함수\n  const validateToken = async () => {\n    try {\n      const token = state.token || localStorage.getItem('authToken') || sessionStorage.getItem('authToken');\n      if (!token) {\n        return false;\n      }\n      const response = await fetch('https://quinors-lv-backend.ngrok.io/api/auth/validate', {\n        method: 'GET',\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      });\n      if (response.ok) {\n        const result = await response.json();\n        return result.success;\n      }\n      return false;\n    } catch (error) {\n      console.error('토큰 검증 오류:', error);\n      return false;\n    }\n  };\n\n  // Context value\n  const contextValue = {\n    // 상태\n    ...state,\n    // 함수들\n    login,\n    register,\n    logout,\n    clearError,\n    changePassword,\n    updateUserInfo,\n    validateToken,\n    // 유틸리티\n    isLoggedIn: state.isAuthenticated && state.user && state.token,\n    userRole: ((_state$user = state.user) === null || _state$user === void 0 ? void 0 : _state$user.role) || 'user',\n    userId: ((_state$user2 = state.user) === null || _state$user2 === void 0 ? void 0 : _state$user2.user_id) || null,\n    userName: ((_state$user3 = state.user) === null || _state$user3 === void 0 ? void 0 : _state$user3.charge_name) || ((_state$user4 = state.user) === null || _state$user4 === void 0 ? void 0 : _state$user4.user_id) || null\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: contextValue,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 395,\n    columnNumber: 5\n  }, this);\n};\n\n// Hook\n_s(AuthProvider, \"bgCdjuTOmPdSBRwTap80EFd9Y3U=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within AuthProvider');\n  }\n  return context;\n};\n\n// 기본 내보내기\n_s2(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport default AuthContext;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useReducer","useEffect","jsxDEV","_jsxDEV","AuthContext","initialState","isAuthenticated","user","loading","error","token","authReducer","state","action","type","payload","AuthProvider","children","_s","_state$user","_state$user2","_state$user3","_state$user4","dispatch","localStorage","getItem","userInfo","parsedUserInfo","JSON","parse","console","log","charge_name","user_id","removeItem","login","credentials","userId","username","healthResponse","fetch","ok","Error","response","method","headers","body","stringify","password","rememberMe","contentType","get","includes","result","json","success","data","setItem","sessionStorage","message","errorMessage","register","registerData","cust_name","dong_name","dong_detail","dept_name","tel_no","replace","logout","clearError","changePassword","currentPassword","newPassword","updateUserInfo","updateData","updatedUser","validateToken","contextValue","isLoggedIn","userRole","role","userName","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","context","$RefreshReg$"],"sources":["C:/project/quinorslv/quinors-app-frontend/client/src/context/AuthContext.jsx"],"sourcesContent":["import React, { createContext, useContext, useReducer, useEffect } from 'react';\r\n\r\nconst AuthContext = createContext();\r\n\r\nconst initialState = {\r\n  isAuthenticated: false,\r\n  user: null,\r\n  loading: false,\r\n  error: null,\r\n  token: null\r\n};\r\n\r\nconst authReducer = (state, action) => {\r\n  switch (action.type) {\r\n    case 'LOGIN_START':\r\n      return { ...state, loading: true, error: null };\r\n    \r\n    case 'LOGIN_SUCCESS':\r\n      return {\r\n        ...state,\r\n        isAuthenticated: true,\r\n        user: action.payload.user,\r\n        token: action.payload.token,\r\n        loading: false,\r\n        error: null\r\n      };\r\n    \r\n    case 'LOGIN_FAILURE':\r\n      return {\r\n        ...state,\r\n        isAuthenticated: false,\r\n        user: null,\r\n        token: null,\r\n        loading: false,\r\n        error: action.payload\r\n      };\r\n    \r\n    case 'LOGOUT':\r\n      return {\r\n        ...state,\r\n        isAuthenticated: false,\r\n        user: null,\r\n        token: null,\r\n        loading: false,\r\n        error: null\r\n      };\r\n    \r\n    case 'RESTORE_SESSION':\r\n      return {\r\n        ...state,\r\n        isAuthenticated: true,\r\n        user: action.payload.user,\r\n        token: action.payload.token,\r\n        loading: false\r\n      };\r\n    \r\n    case 'CLEAR_ERROR':\r\n      return { ...state, error: null };\r\n    \r\n    case 'REGISTER_START':\r\n      return { ...state, loading: true, error: null };\r\n    \r\n    case 'REGISTER_SUCCESS':\r\n      return { ...state, loading: false, error: null };\r\n    \r\n    case 'REGISTER_FAILURE':\r\n      return { ...state, loading: false, error: action.payload };\r\n    \r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [state, dispatch] = useReducer(authReducer, initialState);\r\n\r\n  // 페이지 로드 시 저장된 인증 정보 복원\r\n  useEffect(() => {\r\n    const token = localStorage.getItem('authToken');\r\n    const userInfo = localStorage.getItem('userInfo');\r\n    \r\n    if (token && userInfo) {\r\n      try {\r\n        const parsedUserInfo = JSON.parse(userInfo);\r\n        dispatch({\r\n          type: 'RESTORE_SESSION',\r\n          payload: {\r\n            user: parsedUserInfo,\r\n            token: token\r\n          }\r\n        });\r\n        console.log('✅ 세션 복원 성공:', parsedUserInfo.charge_name || parsedUserInfo.user_id);\r\n      } catch (error) {\r\n        console.error('세션 복원 오류:', error);\r\n        localStorage.removeItem('authToken');\r\n        localStorage.removeItem('userInfo');\r\n      }\r\n    }\r\n  }, []);\r\n\r\n  // 로그인 함수\r\n  const login = async (credentials) => {\r\n    dispatch({ type: 'LOGIN_START' });\r\n    \r\n    try {\r\n      console.log('🔐 로그인 시도:', { userId: credentials.username });\r\n      \r\n      // 서버 상태 확인\r\n      const healthResponse = await fetch('https://quinors-lv-backend.ngrok.io/api/health');\r\n      if (!healthResponse.ok) {\r\n        throw new Error('서버에 연결할 수 없습니다.');\r\n      }\r\n\r\n      // 로그인 API 호출\r\n      const response = await fetch('https://quinors-lv-backend.ngrok.io/api/auth/login', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Accept': 'application/json'\r\n        },\r\n        body: JSON.stringify({\r\n          user_id: credentials.username, // 새로운 필드명에 맞게 수정\r\n          password: credentials.password,\r\n          rememberMe: credentials.rememberMe || false\r\n        })\r\n      });\r\n\r\n      const contentType = response.headers.get('content-type');\r\n      if (!contentType || !contentType.includes('application/json')) {\r\n        throw new Error('서버에서 올바르지 않은 응답을 받았습니다.');\r\n      }\r\n\r\n      const result = await response.json();\r\n      console.log('🔐 로그인 API 응답:', result);\r\n\r\n      if (response.ok && result.success) {\r\n        const { user, token } = result.data;\r\n        \r\n        // 로컬 스토리지에 저장\r\n        if (credentials.rememberMe) {\r\n          localStorage.setItem('authToken', token);\r\n          localStorage.setItem('userInfo', JSON.stringify(user));\r\n        } else {\r\n          sessionStorage.setItem('authToken', token);\r\n          sessionStorage.setItem('userInfo', JSON.stringify(user));\r\n        }\r\n\r\n        dispatch({\r\n          type: 'LOGIN_SUCCESS',\r\n          payload: { user, token }\r\n        });\r\n\r\n        console.log('✅ 로그인 성공:', user.charge_name || user.user_id);\r\n      } else {\r\n        throw new Error(result.message || '로그인에 실패했습니다.');\r\n      }\r\n    } catch (error) {\r\n      console.error('❌ 로그인 오류:', error);\r\n      \r\n      // 구체적인 에러 메시지 처리\r\n      let errorMessage = error.message;\r\n      \r\n      if (error.message.includes('Failed to fetch')) {\r\n        errorMessage = '서버에 연결할 수 없습니다. 네트워크 연결을 확인해주세요.';\r\n      } else if (error.message.includes('JSON')) {\r\n        errorMessage = '서버 응답 처리 중 오류가 발생했습니다.';\r\n      }\r\n      \r\n      dispatch({\r\n        type: 'LOGIN_FAILURE',\r\n        payload: errorMessage\r\n      });\r\n      \r\n      throw new Error(errorMessage);\r\n    }\r\n  };\r\n\r\n  // 회원가입 함수\r\n  const register = async (registerData) => {\r\n    dispatch({ type: 'REGISTER_START' });\r\n    \r\n    try {\r\n      console.log('📝 회원가입 시도:', { user_id: registerData.user_id });\r\n      \r\n      // 서버 상태 확인\r\n      const healthResponse = await fetch('https://quinors-lv-backend.ngrok.io/api/health');\r\n      if (!healthResponse.ok) {\r\n        throw new Error('서버에 연결할 수 없습니다.');\r\n      }\r\n\r\n      // 회원가입 API 호출\r\n      const response = await fetch('https://quinors-lv-backend.ngrok.io/api/auth/register', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Accept': 'application/json'\r\n        },\r\n        body: JSON.stringify({\r\n          user_id: registerData.user_id,\r\n          password: registerData.password,\r\n          cust_name: registerData.cust_name,\r\n          dong_name: registerData.dong_name,\r\n          dong_detail: registerData.dong_detail || '',\r\n          dept_name: registerData.dept_name,\r\n          charge_name: registerData.charge_name,\r\n          tel_no: registerData.tel_no.replace(/[^0-9]/g, '') // 숫자만 저장\r\n        })\r\n      });\r\n\r\n      const contentType = response.headers.get('content-type');\r\n      if (!contentType || !contentType.includes('application/json')) {\r\n        throw new Error('서버에서 올바르지 않은 응답을 받았습니다.');\r\n      }\r\n\r\n      const result = await response.json();\r\n      console.log('📝 회원가입 API 응답:', result);\r\n\r\n      if (response.ok && result.success) {\r\n        dispatch({ type: 'REGISTER_SUCCESS' });\r\n        console.log('✅ 회원가입 성공:', registerData.user_id);\r\n        return result;\r\n      } else {\r\n        throw new Error(result.message || '회원가입에 실패했습니다.');\r\n      }\r\n    } catch (error) {\r\n      console.error('❌ 회원가입 오류:', error);\r\n      \r\n      // 구체적인 에러 메시지 처리\r\n      let errorMessage = error.message;\r\n      \r\n      if (error.message.includes('Failed to fetch')) {\r\n        errorMessage = '서버에 연결할 수 없습니다. 네트워크 연결을 확인해주세요.';\r\n      } else if (error.message.includes('JSON')) {\r\n        errorMessage = '서버 응답 처리 중 오류가 발생했습니다.';\r\n      }\r\n      \r\n      dispatch({\r\n        type: 'REGISTER_FAILURE',\r\n        payload: errorMessage\r\n      });\r\n      \r\n      throw new Error(errorMessage);\r\n    }\r\n  };\r\n\r\n  // 로그아웃 함수\r\n  const logout = () => {\r\n    localStorage.removeItem('authToken');\r\n    localStorage.removeItem('userInfo');\r\n    sessionStorage.removeItem('authToken');\r\n    sessionStorage.removeItem('userInfo');\r\n    \r\n    dispatch({ type: 'LOGOUT' });\r\n    console.log('🚪 로그아웃 완료');\r\n  };\r\n\r\n  // 에러 초기화 함수\r\n  const clearError = () => {\r\n    dispatch({ type: 'CLEAR_ERROR' });\r\n  };\r\n\r\n  // 비밀번호 변경 함수\r\n  const changePassword = async (currentPassword, newPassword) => {\r\n    try {\r\n      const token = state.token || localStorage.getItem('authToken') || sessionStorage.getItem('authToken');\r\n      \r\n      if (!token) {\r\n        throw new Error('인증 토큰이 없습니다. 다시 로그인해주세요.');\r\n      }\r\n\r\n      const response = await fetch('https://quinors-lv-backend.ngrok.io/api/auth/change-password', {\r\n        method: 'PUT',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Authorization': `Bearer ${token}`\r\n        },\r\n        body: JSON.stringify({\r\n          currentPassword,\r\n          newPassword\r\n        })\r\n      });\r\n\r\n      const result = await response.json();\r\n\r\n      if (response.ok && result.success) {\r\n        console.log('✅ 비밀번호 변경 성공');\r\n        return result;\r\n      } else {\r\n        throw new Error(result.message || '비밀번호 변경에 실패했습니다.');\r\n      }\r\n    } catch (error) {\r\n      console.error('❌ 비밀번호 변경 오류:', error);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  // 사용자 정보 업데이트 함수\r\n  const updateUserInfo = async (updateData) => {\r\n    try {\r\n      const token = state.token || localStorage.getItem('authToken') || sessionStorage.getItem('authToken');\r\n      \r\n      if (!token) {\r\n        throw new Error('인증 토큰이 없습니다. 다시 로그인해주세요.');\r\n      }\r\n\r\n      const response = await fetch('https://quinors-lv-backend.ngrok.io/api/auth/profile', {\r\n        method: 'PUT',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Authorization': `Bearer ${token}`\r\n        },\r\n        body: JSON.stringify(updateData)\r\n      });\r\n\r\n      const result = await response.json();\r\n\r\n      if (response.ok && result.success) {\r\n        // 업데이트된 사용자 정보를 상태에 반영\r\n        const updatedUser = { ...state.user, ...result.data };\r\n        \r\n        // 스토리지 업데이트\r\n        if (localStorage.getItem('userInfo')) {\r\n          localStorage.setItem('userInfo', JSON.stringify(updatedUser));\r\n        }\r\n        if (sessionStorage.getItem('userInfo')) {\r\n          sessionStorage.setItem('userInfo', JSON.stringify(updatedUser));\r\n        }\r\n\r\n        dispatch({\r\n          type: 'LOGIN_SUCCESS',\r\n          payload: { user: updatedUser, token: state.token }\r\n        });\r\n\r\n        console.log('✅ 사용자 정보 업데이트 성공');\r\n        return result;\r\n      } else {\r\n        throw new Error(result.message || '사용자 정보 업데이트에 실패했습니다.');\r\n      }\r\n    } catch (error) {\r\n      console.error('❌ 사용자 정보 업데이트 오류:', error);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  // 토큰 유효성 검사 함수\r\n  const validateToken = async () => {\r\n    try {\r\n      const token = state.token || localStorage.getItem('authToken') || sessionStorage.getItem('authToken');\r\n      \r\n      if (!token) {\r\n        return false;\r\n      }\r\n\r\n      const response = await fetch('https://quinors-lv-backend.ngrok.io/api/auth/validate', {\r\n        method: 'GET',\r\n        headers: {\r\n          'Authorization': `Bearer ${token}`\r\n        }\r\n      });\r\n\r\n      if (response.ok) {\r\n        const result = await response.json();\r\n        return result.success;\r\n      }\r\n      \r\n      return false;\r\n    } catch (error) {\r\n      console.error('토큰 검증 오류:', error);\r\n      return false;\r\n    }\r\n  };\r\n\r\n  // Context value\r\n  const contextValue = {\r\n    // 상태\r\n    ...state,\r\n    \r\n    // 함수들\r\n    login,\r\n    register,\r\n    logout,\r\n    clearError,\r\n    changePassword,\r\n    updateUserInfo,\r\n    validateToken,\r\n    \r\n    // 유틸리티\r\n    isLoggedIn: state.isAuthenticated && state.user && state.token,\r\n    userRole: state.user?.role || 'user',\r\n    userId: state.user?.user_id || null,\r\n    userName: state.user?.charge_name || state.user?.user_id || null\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={contextValue}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\n// Hook\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  if (!context) {\r\n    throw new Error('useAuth must be used within AuthProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\n// 기본 내보내기\r\nexport default AuthContext;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}