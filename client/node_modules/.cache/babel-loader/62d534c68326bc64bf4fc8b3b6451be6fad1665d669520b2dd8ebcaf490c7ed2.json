{"ast":null,"code":"var _jsxFileName = \"C:\\\\project\\\\quinorslv\\\\quinors-app-frontend\\\\client\\\\src\\\\context\\\\AuthContext.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useReducer, useEffect } from 'react';\nimport api from '../services/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nconst initialState = {\n  isAuthenticated: false,\n  user: null,\n  loading: false,\n  error: null,\n  token: null\n};\nconst authReducer = (state, action) => {\n  switch (action.type) {\n    case 'LOGIN_START':\n    case 'REGISTER_START':\n      return {\n        ...state,\n        loading: true,\n        error: null\n      };\n    case 'LOGIN_SUCCESS':\n      return {\n        ...state,\n        isAuthenticated: true,\n        user: action.payload.user,\n        token: action.payload.token,\n        loading: false,\n        error: null\n      };\n    case 'LOGIN_FAILURE':\n    case 'REGISTER_FAILURE':\n      return {\n        ...state,\n        isAuthenticated: false,\n        user: null,\n        token: null,\n        loading: false,\n        error: action.payload\n      };\n    case 'REGISTER_SUCCESS':\n      return {\n        ...state,\n        loading: false,\n        error: null\n      };\n    case 'LOGOUT':\n      return {\n        ...state,\n        isAuthenticated: false,\n        user: null,\n        token: null,\n        loading: false,\n        error: null\n      };\n    case 'RESTORE_SESSION':\n      return {\n        ...state,\n        isAuthenticated: true,\n        user: action.payload.user,\n        token: action.payload.token,\n        loading: false\n      };\n    case 'CLEAR_ERROR':\n      return {\n        ...state,\n        error: null\n      };\n    default:\n      return state;\n  }\n};\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  var _state$user, _state$user2, _state$user3, _state$user4, _state$user5;\n  const [state, dispatch] = useReducer(authReducer, initialState);\n\n  // 페이지 로드 시 저장된 인증 정보 복원\n  useEffect(() => {\n    const token = localStorage.getItem('token');\n    const userInfo = localStorage.getItem('userInfo');\n    if (token && userInfo) {\n      try {\n        const parsedUserInfo = JSON.parse(userInfo);\n        dispatch({\n          type: 'RESTORE_SESSION',\n          payload: {\n            user: parsedUserInfo,\n            token: token\n          }\n        });\n        console.log('✅ 세션 복원 완료:', parsedUserInfo.managerName || parsedUserInfo.userId);\n      } catch (error) {\n        console.error('❌ 세션 복원 중 오류 발생:', error);\n        localStorage.removeItem('token');\n        localStorage.removeItem('userInfo');\n      }\n    }\n  }, []);\n\n  // 🔐 로그인 함수 - 새로운 API 연결\n  const login = async credentials => {\n    dispatch({\n      type: 'LOGIN_START'\n    });\n    try {\n      console.log('🔐 로그인 시도 중:', {\n        userId: credentials.username\n      });\n      const response = await api.post('/auth/login', {\n        userId: credentials.username,\n        // 새로운 서버 API에 맞게 수정\n        password: credentials.password\n      });\n      if (response.data.success) {\n        const {\n          user,\n          token\n        } = response.data.data;\n\n        // 토큰을 localStorage와 axios 기본 헤더에 저장\n        localStorage.setItem('token', token);\n        localStorage.setItem('userInfo', JSON.stringify(user));\n\n        // axios 기본 헤더에 토큰 설정\n        api.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n        dispatch({\n          type: 'LOGIN_SUCCESS',\n          payload: {\n            user,\n            token\n          }\n        });\n        console.log('✅ 로그인 성공:', user.managerName || user.userId);\n      }\n    } catch (error) {\n      var _error$response, _error$response$data;\n      console.error('❌ 로그인 실패:', error);\n      const errorMessage = ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || error.message || '로그인에 실패했습니다.';\n      dispatch({\n        type: 'LOGIN_FAILURE',\n        payload: errorMessage\n      });\n      throw new Error(errorMessage);\n    }\n  };\n\n  // 📝 회원가입 신청 함수 - 새로운 API 연결\n  const register = async registerData => {\n    dispatch({\n      type: 'REGISTER_START'\n    });\n    try {\n      console.log('📝 회원가입 신청 중:', registerData);\n      const response = await api.post('/auth/register', {\n        managerName: registerData.managerName,\n        storeCode: registerData.storeCode,\n        phoneLast4: registerData.phoneLast4,\n        department: registerData.department\n      });\n      if (response.data.success) {\n        dispatch({\n          type: 'REGISTER_SUCCESS'\n        });\n        console.log('✅ 회원가입 신청 완료');\n        return response.data;\n      }\n    } catch (error) {\n      var _error$response2, _error$response2$data;\n      console.error('❌ 회원가입 신청 실패:', error);\n      const errorMessage = ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || error.message || '회원가입 신청에 실패했습니다.';\n      dispatch({\n        type: 'REGISTER_FAILURE',\n        payload: errorMessage\n      });\n      throw new Error(errorMessage);\n    }\n  };\n\n  // 🔑 비밀번호 변경 함수\n  const changePassword = async (currentPassword, newPassword) => {\n    try {\n      console.log('🔐 비밀번호 변경 요청 중...');\n      const response = await api.put('/auth/change-password', {\n        currentPassword,\n        newPassword\n      });\n      if (response.data.success) {\n        console.log('✅ 비밀번호 변경 완료');\n        return response.data;\n      }\n    } catch (error) {\n      var _error$response3, _error$response3$data;\n      console.error('❌ 비밀번호 변경 실패:', error);\n      const errorMessage = ((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.message) || error.message || '비밀번호 변경에 실패했습니다.';\n      throw new Error(errorMessage);\n    }\n  };\n\n  // 👤 사용자 정보 조회 함수\n  const getUserInfo = async () => {\n    try {\n      const response = await api.get('/auth/me');\n      if (response.data.success) {\n        const updatedUser = response.data.data;\n\n        // 로컬 스토리지 업데이트\n        localStorage.setItem('userInfo', JSON.stringify(updatedUser));\n        dispatch({\n          type: 'LOGIN_SUCCESS',\n          payload: {\n            user: updatedUser,\n            token: state.token\n          }\n        });\n        return updatedUser;\n      }\n    } catch (error) {\n      console.error('❌ 사용자 정보 조회 실패:', error);\n      throw error;\n    }\n  };\n\n  // 🚪 로그아웃 함수\n  const logout = () => {\n    localStorage.removeItem('token');\n    localStorage.removeItem('userInfo');\n    delete api.defaults.headers.common['Authorization'];\n    dispatch({\n      type: 'LOGOUT'\n    });\n    console.log('🚪 로그아웃 완료');\n  };\n\n  // ❌ 에러 초기화 함수\n  const clearError = () => {\n    dispatch({\n      type: 'CLEAR_ERROR'\n    });\n  };\n\n  // Context value\n  const contextValue = {\n    // 상태\n    ...state,\n    // 함수들\n    login,\n    register,\n    logout,\n    clearError,\n    changePassword,\n    getUserInfo,\n    // 유틸리티\n    isLoggedIn: state.isAuthenticated && state.user && state.token,\n    userRole: ((_state$user = state.user) === null || _state$user === void 0 ? void 0 : _state$user.role) || 'user',\n    userId: ((_state$user2 = state.user) === null || _state$user2 === void 0 ? void 0 : _state$user2.userId) || null,\n    userName: ((_state$user3 = state.user) === null || _state$user3 === void 0 ? void 0 : _state$user3.managerName) || ((_state$user4 = state.user) === null || _state$user4 === void 0 ? void 0 : _state$user4.userId) || null,\n    isAdmin: ((_state$user5 = state.user) === null || _state$user5 === void 0 ? void 0 : _state$user5.role) === 'admin'\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: contextValue,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 264,\n    columnNumber: 5\n  }, this);\n};\n\n// Hook\n_s(AuthProvider, \"bgCdjuTOmPdSBRwTap80EFd9Y3U=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth는 AuthProvider 내부에서만 사용할 수 있습니다.');\n  }\n  return context;\n};\n_s2(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport default AuthContext;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useReducer","useEffect","api","jsxDEV","_jsxDEV","AuthContext","initialState","isAuthenticated","user","loading","error","token","authReducer","state","action","type","payload","AuthProvider","children","_s","_state$user","_state$user2","_state$user3","_state$user4","_state$user5","dispatch","localStorage","getItem","userInfo","parsedUserInfo","JSON","parse","console","log","managerName","userId","removeItem","login","credentials","username","response","post","password","data","success","setItem","stringify","defaults","headers","common","_error$response","_error$response$data","errorMessage","message","Error","register","registerData","storeCode","phoneLast4","department","_error$response2","_error$response2$data","changePassword","currentPassword","newPassword","put","_error$response3","_error$response3$data","getUserInfo","get","updatedUser","logout","clearError","contextValue","isLoggedIn","userRole","role","userName","isAdmin","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","context","$RefreshReg$"],"sources":["C:/project/quinorslv/quinors-app-frontend/client/src/context/AuthContext.jsx"],"sourcesContent":["import React, { createContext, useContext, useReducer, useEffect } from 'react';\r\nimport api from '../services/api';\r\n\r\nconst AuthContext = createContext();\r\n\r\nconst initialState = {\r\n  isAuthenticated: false,\r\n  user: null,\r\n  loading: false,\r\n  error: null,\r\n  token: null\r\n};\r\n\r\nconst authReducer = (state, action) => {\r\n  switch (action.type) {\r\n    case 'LOGIN_START':\r\n    case 'REGISTER_START':\r\n      return { ...state, loading: true, error: null };\r\n      \r\n    case 'LOGIN_SUCCESS':\r\n      return {\r\n        ...state,\r\n        isAuthenticated: true,\r\n        user: action.payload.user,\r\n        token: action.payload.token,\r\n        loading: false,\r\n        error: null\r\n      };\r\n      \r\n    case 'LOGIN_FAILURE':\r\n    case 'REGISTER_FAILURE':\r\n      return {\r\n        ...state,\r\n        isAuthenticated: false,\r\n        user: null,\r\n        token: null,\r\n        loading: false,\r\n        error: action.payload\r\n      };\r\n      \r\n    case 'REGISTER_SUCCESS':\r\n      return { ...state, loading: false, error: null };\r\n      \r\n    case 'LOGOUT':\r\n      return {\r\n        ...state,\r\n        isAuthenticated: false,\r\n        user: null,\r\n        token: null,\r\n        loading: false,\r\n        error: null\r\n      };\r\n      \r\n    case 'RESTORE_SESSION':\r\n      return {\r\n        ...state,\r\n        isAuthenticated: true,\r\n        user: action.payload.user,\r\n        token: action.payload.token,\r\n        loading: false\r\n      };\r\n      \r\n    case 'CLEAR_ERROR':\r\n      return { ...state, error: null };\r\n      \r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [state, dispatch] = useReducer(authReducer, initialState);\r\n\r\n  // 페이지 로드 시 저장된 인증 정보 복원\r\n  useEffect(() => {\r\n    const token = localStorage.getItem('token');\r\n    const userInfo = localStorage.getItem('userInfo');\r\n    \r\n    if (token && userInfo) {\r\n      try {\r\n        const parsedUserInfo = JSON.parse(userInfo);\r\n        dispatch({\r\n          type: 'RESTORE_SESSION',\r\n          payload: {\r\n            user: parsedUserInfo,\r\n            token: token\r\n          }\r\n        });\r\n        console.log('✅ 세션 복원 완료:', parsedUserInfo.managerName || parsedUserInfo.userId);\r\n      } catch (error) {\r\n        console.error('❌ 세션 복원 중 오류 발생:', error);\r\n        localStorage.removeItem('token');\r\n        localStorage.removeItem('userInfo');\r\n      }\r\n    }\r\n  }, []);\r\n\r\n  // 🔐 로그인 함수 - 새로운 API 연결\r\n  const login = async (credentials) => {\r\n    dispatch({ type: 'LOGIN_START' });\r\n    \r\n    try {\r\n      console.log('🔐 로그인 시도 중:', { userId: credentials.username });\r\n      \r\n      const response = await api.post('/auth/login', {\r\n        userId: credentials.username,  // 새로운 서버 API에 맞게 수정\r\n        password: credentials.password\r\n      });\r\n\r\n      if (response.data.success) {\r\n        const { user, token } = response.data.data;\r\n        \r\n        // 토큰을 localStorage와 axios 기본 헤더에 저장\r\n        localStorage.setItem('token', token);\r\n        localStorage.setItem('userInfo', JSON.stringify(user));\r\n        \r\n        // axios 기본 헤더에 토큰 설정\r\n        api.defaults.headers.common['Authorization'] = `Bearer ${token}`;\r\n        \r\n        dispatch({\r\n          type: 'LOGIN_SUCCESS',\r\n          payload: { user, token }\r\n        });\r\n        \r\n        console.log('✅ 로그인 성공:', user.managerName || user.userId);\r\n      }\r\n    } catch (error) {\r\n      console.error('❌ 로그인 실패:', error);\r\n      \r\n      const errorMessage = error.response?.data?.message || \r\n                          error.message || \r\n                          '로그인에 실패했습니다.';\r\n      \r\n      dispatch({\r\n        type: 'LOGIN_FAILURE',\r\n        payload: errorMessage\r\n      });\r\n      \r\n      throw new Error(errorMessage);\r\n    }\r\n  };\r\n\r\n  // 📝 회원가입 신청 함수 - 새로운 API 연결\r\n  const register = async (registerData) => {\r\n    dispatch({ type: 'REGISTER_START' });\r\n    \r\n    try {\r\n      console.log('📝 회원가입 신청 중:', registerData);\r\n      \r\n      const response = await api.post('/auth/register', {\r\n        managerName: registerData.managerName,\r\n        storeCode: registerData.storeCode,\r\n        phoneLast4: registerData.phoneLast4,\r\n        department: registerData.department\r\n      });\r\n\r\n      if (response.data.success) {\r\n        dispatch({ type: 'REGISTER_SUCCESS' });\r\n        console.log('✅ 회원가입 신청 완료');\r\n        return response.data;\r\n      }\r\n    } catch (error) {\r\n      console.error('❌ 회원가입 신청 실패:', error);\r\n      \r\n      const errorMessage = error.response?.data?.message || \r\n                          error.message || \r\n                          '회원가입 신청에 실패했습니다.';\r\n      \r\n      dispatch({\r\n        type: 'REGISTER_FAILURE',\r\n        payload: errorMessage\r\n      });\r\n      \r\n      throw new Error(errorMessage);\r\n    }\r\n  };\r\n\r\n  // 🔑 비밀번호 변경 함수\r\n  const changePassword = async (currentPassword, newPassword) => {\r\n    try {\r\n      console.log('🔐 비밀번호 변경 요청 중...');\r\n      \r\n      const response = await api.put('/auth/change-password', {\r\n        currentPassword,\r\n        newPassword\r\n      });\r\n\r\n      if (response.data.success) {\r\n        console.log('✅ 비밀번호 변경 완료');\r\n        return response.data;\r\n      }\r\n    } catch (error) {\r\n      console.error('❌ 비밀번호 변경 실패:', error);\r\n      \r\n      const errorMessage = error.response?.data?.message || \r\n                          error.message || \r\n                          '비밀번호 변경에 실패했습니다.';\r\n      \r\n      throw new Error(errorMessage);\r\n    }\r\n  };\r\n\r\n  // 👤 사용자 정보 조회 함수\r\n  const getUserInfo = async () => {\r\n    try {\r\n      const response = await api.get('/auth/me');\r\n      \r\n      if (response.data.success) {\r\n        const updatedUser = response.data.data;\r\n        \r\n        // 로컬 스토리지 업데이트\r\n        localStorage.setItem('userInfo', JSON.stringify(updatedUser));\r\n        \r\n        dispatch({\r\n          type: 'LOGIN_SUCCESS',\r\n          payload: { user: updatedUser, token: state.token }\r\n        });\r\n        \r\n        return updatedUser;\r\n      }\r\n    } catch (error) {\r\n      console.error('❌ 사용자 정보 조회 실패:', error);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  // 🚪 로그아웃 함수\r\n  const logout = () => {\r\n    localStorage.removeItem('token');\r\n    localStorage.removeItem('userInfo');\r\n    delete api.defaults.headers.common['Authorization'];\r\n    \r\n    dispatch({ type: 'LOGOUT' });\r\n    console.log('🚪 로그아웃 완료');\r\n  };\r\n\r\n  // ❌ 에러 초기화 함수\r\n  const clearError = () => {\r\n    dispatch({ type: 'CLEAR_ERROR' });\r\n  };\r\n\r\n  // Context value\r\n  const contextValue = {\r\n    // 상태\r\n    ...state,\r\n    \r\n    // 함수들\r\n    login,\r\n    register,\r\n    logout,\r\n    clearError,\r\n    changePassword,\r\n    getUserInfo,\r\n    \r\n    // 유틸리티\r\n    isLoggedIn: state.isAuthenticated && state.user && state.token,\r\n    userRole: state.user?.role || 'user',\r\n    userId: state.user?.userId || null,\r\n    userName: state.user?.managerName || state.user?.userId || null,\r\n    isAdmin: state.user?.role === 'admin'\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={contextValue}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\n// Hook\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  if (!context) {\r\n    throw new Error('useAuth는 AuthProvider 내부에서만 사용할 수 있습니다.');\r\n  }\r\n  return context;\r\n};\r\n\r\nexport default AuthContext;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}