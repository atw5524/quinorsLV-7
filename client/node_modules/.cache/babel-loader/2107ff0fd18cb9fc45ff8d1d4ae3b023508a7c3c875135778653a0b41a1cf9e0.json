{"ast":null,"code":"var _jsxFileName = \"C:\\\\project\\\\quinorslv\\\\quinors-app-frontend\\\\client\\\\src\\\\context\\\\AuthContext.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// client/src/context/AuthContext.jsx\nimport React, { createContext, useContext, useReducer, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nconst initialState = {\n  isAuthenticated: false,\n  user: null,\n  loading: false,\n  error: null,\n  token: null\n};\nconst authReducer = (state, action) => {\n  switch (action.type) {\n    case 'LOGIN_START':\n    case 'REGISTER_START':\n      return {\n        ...state,\n        loading: true,\n        error: null\n      };\n    case 'LOGIN_SUCCESS':\n      return {\n        ...state,\n        isAuthenticated: true,\n        user: action.payload.user,\n        token: action.payload.token,\n        loading: false,\n        error: null\n      };\n    case 'LOGIN_FAILURE':\n    case 'REGISTER_FAILURE':\n      return {\n        ...state,\n        isAuthenticated: false,\n        user: null,\n        token: null,\n        loading: false,\n        error: action.payload\n      };\n    case 'REGISTER_SUCCESS':\n      return {\n        ...state,\n        loading: false,\n        error: null\n      };\n    case 'LOGOUT':\n      return {\n        ...state,\n        isAuthenticated: false,\n        user: null,\n        token: null,\n        loading: false,\n        error: null\n      };\n    case 'RESTORE_SESSION':\n      return {\n        ...state,\n        isAuthenticated: true,\n        user: action.payload.user,\n        token: action.payload.token,\n        loading: false\n      };\n    case 'CLEAR_ERROR':\n      return {\n        ...state,\n        error: null\n      };\n    default:\n      return state;\n  }\n};\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  var _state$user, _state$user2, _state$user3, _state$user4, _state$user5;\n  const [state, dispatch] = useReducer(authReducer, initialState);\n\n  // 페이지 로드 시 저장된 인증 정보 복원\n  useEffect(() => {\n    const token = localStorage.getItem('authToken');\n    const userInfo = localStorage.getItem('userInfo');\n    if (token && userInfo) {\n      try {\n        const parsedUserInfo = JSON.parse(userInfo);\n        dispatch({\n          type: 'RESTORE_SESSION',\n          payload: {\n            user: parsedUserInfo,\n            token: token\n          }\n        });\n        console.log('✅ 세션 복원 완료:', parsedUserInfo.charge_name || parsedUserInfo.user_id);\n      } catch (error) {\n        console.error('❌ 세션 복원 중 오류 발생:', error);\n        localStorage.removeItem('authToken');\n        localStorage.removeItem('userInfo');\n      }\n    }\n  }, []);\n\n  // 🔐 로그인 함수\n  const login = async credentials => {\n    dispatch({\n      type: 'LOGIN_START'\n    });\n    try {\n      console.log('🔐 로그인 시도 중:', {\n        user_id: credentials.username\n      });\n\n      // 서버 상태 확인\n      const healthResponse = await fetch('https://quinors-lv-backend.ngrok.io/api/health');\n      if (!healthResponse.ok) {\n        throw new Error('서버에 연결할 수 없습니다. 잠시 후 다시 시도해주세요.');\n      }\n\n      // 로그인 API 호출\n      const response = await fetch('https://quinors-lv-backend.ngrok.io/api/auth/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Accept': 'application/json'\n        },\n        body: JSON.stringify({\n          user_id: credentials.username,\n          password: credentials.password,\n          rememberMe: credentials.rememberMe || false\n        })\n      });\n      const contentType = response.headers.get('content-type');\n      if (!contentType || !contentType.includes('application/json')) {\n        throw new Error('서버에서 올바르지 않은 응답을 받았습니다. 관리자에게 문의하세요.');\n      }\n      const result = await response.json();\n      console.log('📋 로그인 응답 확인:', result);\n      if (response.ok && result.success) {\n        const {\n          user,\n          token\n        } = result.data;\n\n        // 로컬 스토리지에 저장\n        if (credentials.rememberMe) {\n          localStorage.setItem('authToken', token);\n          localStorage.setItem('userInfo', JSON.stringify(user));\n        } else {\n          sessionStorage.setItem('authToken', token);\n          sessionStorage.setItem('userInfo', JSON.stringify(user));\n        }\n        dispatch({\n          type: 'LOGIN_SUCCESS',\n          payload: {\n            user,\n            token\n          }\n        });\n        console.log('✅ 로그인 성공:', user.charge_name || user.user_id);\n      } else {\n        const errorMessage = result.message || '아이디 또는 비밀번호가 올바르지 않습니다.';\n        throw new Error(errorMessage);\n      }\n    } catch (error) {\n      console.error('❌ 로그인 실패:', error);\n      let errorMessage = error.message;\n      if (error.message.includes('Failed to fetch') || error.message.includes('ERR_CONNECTION_REFUSED')) {\n        errorMessage = '서버에 연결할 수 없습니다.\\n\\n• 인터넷 연결을 확인해주세요\\n• 서버 상태를 확인해주세요\\n• 잠시 후 다시 시도해주세요';\n      } else if (error.message.includes('JSON')) {\n        errorMessage = '서버 응답 처리 중 오류가 발생했습니다.\\n관리자에게 문의해주세요.';\n      }\n      dispatch({\n        type: 'LOGIN_FAILURE',\n        payload: errorMessage\n      });\n      throw new Error(errorMessage);\n    }\n  };\n\n  // 📝 회원가입 함수\n  const register = async registerData => {\n    dispatch({\n      type: 'REGISTER_START'\n    });\n    try {\n      console.log('📝 회원가입 요청 중:', {\n        user_id: registerData.user_id\n      });\n\n      // 서버 상태 확인\n      const healthResponse = await fetch('https://quinors-lv-backend.ngrok.io/api/health');\n      if (!healthResponse.ok) {\n        throw new Error('서버에 연결할 수 없습니다. 잠시 후 다시 시도해주세요.');\n      }\n\n      // 회원가입 API 호출\n      const response = await fetch('https://quinors-lv-backend.ngrok.io/api/auth/register', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Accept': 'application/json'\n        },\n        body: JSON.stringify(registerData)\n      });\n      const contentType = response.headers.get('content-type');\n      if (!contentType || !contentType.includes('application/json')) {\n        throw new Error('서버에서 올바르지 않은 응답을 받았습니다. 관리자에게 문의하세요.');\n      }\n      const result = await response.json();\n      console.log('📋 회원가입 응답 확인:', result);\n      if (response.ok && result.success) {\n        dispatch({\n          type: 'REGISTER_SUCCESS'\n        });\n        console.log('✅ 회원가입 신청 완료:', registerData.user_id);\n        return result;\n      } else {\n        const errorMessage = result.message || '회원가입 처리 중 오류가 발생했습니다.';\n        throw new Error(errorMessage);\n      }\n    } catch (error) {\n      console.error('❌ 회원가입 실패:', error);\n      let errorMessage = error.message;\n      if (error.message.includes('Failed to fetch')) {\n        errorMessage = '서버에 연결할 수 없습니다.\\n• 인터넷 연결을 확인해주세요\\n• 잠시 후 다시 시도해주세요';\n      } else if (error.message.includes('duplicate') || error.message.includes('중복')) {\n        errorMessage = '이미 사용 중인 정보입니다.\\n다른 정보를 사용해주세요.';\n      }\n      dispatch({\n        type: 'REGISTER_FAILURE',\n        payload: errorMessage\n      });\n      throw new Error(errorMessage);\n    }\n  };\n\n  // 🚪 로그아웃 함수\n  const logout = () => {\n    localStorage.removeItem('authToken');\n    localStorage.removeItem('userInfo');\n    sessionStorage.removeItem('authToken');\n    sessionStorage.removeItem('userInfo');\n    dispatch({\n      type: 'LOGOUT'\n    });\n    console.log('🚪 로그아웃 완료');\n  };\n\n  // ❌ 에러 초기화 함수\n  const clearError = () => {\n    dispatch({\n      type: 'CLEAR_ERROR'\n    });\n  };\n\n  // Context value\n  const contextValue = {\n    // 상태\n    ...state,\n    // 함수들\n    login,\n    register,\n    logout,\n    clearError,\n    // 유틸리티\n    isLoggedIn: state.isAuthenticated && state.user && state.token,\n    userRole: ((_state$user = state.user) === null || _state$user === void 0 ? void 0 : _state$user.role) || 'user',\n    userId: ((_state$user2 = state.user) === null || _state$user2 === void 0 ? void 0 : _state$user2.user_id) || null,\n    userName: ((_state$user3 = state.user) === null || _state$user3 === void 0 ? void 0 : _state$user3.charge_name) || ((_state$user4 = state.user) === null || _state$user4 === void 0 ? void 0 : _state$user4.user_id) || null,\n    isAdmin: ((_state$user5 = state.user) === null || _state$user5 === void 0 ? void 0 : _state$user5.role) === 'admin'\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: contextValue,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 272,\n    columnNumber: 5\n  }, this);\n};\n\n// Hook\n_s(AuthProvider, \"bgCdjuTOmPdSBRwTap80EFd9Y3U=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth는 AuthProvider 내부에서만 사용할 수 있습니다.');\n  }\n  return context;\n};\n_s2(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport default AuthContext;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useReducer","useEffect","jsxDEV","_jsxDEV","AuthContext","initialState","isAuthenticated","user","loading","error","token","authReducer","state","action","type","payload","AuthProvider","children","_s","_state$user","_state$user2","_state$user3","_state$user4","_state$user5","dispatch","localStorage","getItem","userInfo","parsedUserInfo","JSON","parse","console","log","charge_name","user_id","removeItem","login","credentials","username","healthResponse","fetch","ok","Error","response","method","headers","body","stringify","password","rememberMe","contentType","get","includes","result","json","success","data","setItem","sessionStorage","errorMessage","message","register","registerData","logout","clearError","contextValue","isLoggedIn","userRole","role","userId","userName","isAdmin","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","context","$RefreshReg$"],"sources":["C:/project/quinorslv/quinors-app-frontend/client/src/context/AuthContext.jsx"],"sourcesContent":["// client/src/context/AuthContext.jsx\r\nimport React, { createContext, useContext, useReducer, useEffect } from 'react';\r\n\r\nconst AuthContext = createContext();\r\n\r\nconst initialState = {\r\n  isAuthenticated: false,\r\n  user: null,\r\n  loading: false,\r\n  error: null,\r\n  token: null\r\n};\r\n\r\nconst authReducer = (state, action) => {\r\n  switch (action.type) {\r\n    case 'LOGIN_START':\r\n    case 'REGISTER_START':\r\n      return { ...state, loading: true, error: null };\r\n      \r\n    case 'LOGIN_SUCCESS':\r\n      return {\r\n        ...state,\r\n        isAuthenticated: true,\r\n        user: action.payload.user,\r\n        token: action.payload.token,\r\n        loading: false,\r\n        error: null\r\n      };\r\n      \r\n    case 'LOGIN_FAILURE':\r\n    case 'REGISTER_FAILURE':\r\n      return {\r\n        ...state,\r\n        isAuthenticated: false,\r\n        user: null,\r\n        token: null,\r\n        loading: false,\r\n        error: action.payload\r\n      };\r\n      \r\n    case 'REGISTER_SUCCESS':\r\n      return { ...state, loading: false, error: null };\r\n      \r\n    case 'LOGOUT':\r\n      return {\r\n        ...state,\r\n        isAuthenticated: false,\r\n        user: null,\r\n        token: null,\r\n        loading: false,\r\n        error: null\r\n      };\r\n      \r\n    case 'RESTORE_SESSION':\r\n      return {\r\n        ...state,\r\n        isAuthenticated: true,\r\n        user: action.payload.user,\r\n        token: action.payload.token,\r\n        loading: false\r\n      };\r\n      \r\n    case 'CLEAR_ERROR':\r\n      return { ...state, error: null };\r\n      \r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [state, dispatch] = useReducer(authReducer, initialState);\r\n\r\n  // 페이지 로드 시 저장된 인증 정보 복원\r\n  useEffect(() => {\r\n    const token = localStorage.getItem('authToken');\r\n    const userInfo = localStorage.getItem('userInfo');\r\n    \r\n    if (token && userInfo) {\r\n      try {\r\n        const parsedUserInfo = JSON.parse(userInfo);\r\n        dispatch({\r\n          type: 'RESTORE_SESSION',\r\n          payload: {\r\n            user: parsedUserInfo,\r\n            token: token\r\n          }\r\n        });\r\n        console.log('✅ 세션 복원 완료:', parsedUserInfo.charge_name || parsedUserInfo.user_id);\r\n      } catch (error) {\r\n        console.error('❌ 세션 복원 중 오류 발생:', error);\r\n        localStorage.removeItem('authToken');\r\n        localStorage.removeItem('userInfo');\r\n      }\r\n    }\r\n  }, []);\r\n\r\n  // 🔐 로그인 함수\r\n  const login = async (credentials) => {\r\n    dispatch({ type: 'LOGIN_START' });\r\n    \r\n    try {\r\n      console.log('🔐 로그인 시도 중:', { user_id: credentials.username });\r\n      \r\n      // 서버 상태 확인\r\n      const healthResponse = await fetch('https://quinors-lv-backend.ngrok.io/api/health');\r\n      if (!healthResponse.ok) {\r\n        throw new Error('서버에 연결할 수 없습니다. 잠시 후 다시 시도해주세요.');\r\n      }\r\n\r\n      // 로그인 API 호출\r\n      const response = await fetch('https://quinors-lv-backend.ngrok.io/api/auth/login', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Accept': 'application/json'\r\n        },\r\n        body: JSON.stringify({\r\n          user_id: credentials.username,\r\n          password: credentials.password,\r\n          rememberMe: credentials.rememberMe || false\r\n        })\r\n      });\r\n\r\n      const contentType = response.headers.get('content-type');\r\n      if (!contentType || !contentType.includes('application/json')) {\r\n        throw new Error('서버에서 올바르지 않은 응답을 받았습니다. 관리자에게 문의하세요.');\r\n      }\r\n\r\n      const result = await response.json();\r\n      console.log('📋 로그인 응답 확인:', result);\r\n\r\n      if (response.ok && result.success) {\r\n        const { user, token } = result.data;\r\n        \r\n        // 로컬 스토리지에 저장\r\n        if (credentials.rememberMe) {\r\n          localStorage.setItem('authToken', token);\r\n          localStorage.setItem('userInfo', JSON.stringify(user));\r\n        } else {\r\n          sessionStorage.setItem('authToken', token);\r\n          sessionStorage.setItem('userInfo', JSON.stringify(user));\r\n        }\r\n\r\n        dispatch({\r\n          type: 'LOGIN_SUCCESS',\r\n          payload: { user, token }\r\n        });\r\n        \r\n        console.log('✅ 로그인 성공:', user.charge_name || user.user_id);\r\n      } else {\r\n        const errorMessage = result.message || '아이디 또는 비밀번호가 올바르지 않습니다.';\r\n        throw new Error(errorMessage);\r\n      }\r\n\r\n    } catch (error) {\r\n      console.error('❌ 로그인 실패:', error);\r\n      \r\n      let errorMessage = error.message;\r\n      \r\n      if (error.message.includes('Failed to fetch') || error.message.includes('ERR_CONNECTION_REFUSED')) {\r\n        errorMessage = '서버에 연결할 수 없습니다.\\n\\n• 인터넷 연결을 확인해주세요\\n• 서버 상태를 확인해주세요\\n• 잠시 후 다시 시도해주세요';\r\n      } else if (error.message.includes('JSON')) {\r\n        errorMessage = '서버 응답 처리 중 오류가 발생했습니다.\\n관리자에게 문의해주세요.';\r\n      }\r\n\r\n      dispatch({\r\n        type: 'LOGIN_FAILURE',\r\n        payload: errorMessage\r\n      });\r\n      \r\n      throw new Error(errorMessage);\r\n    }\r\n  };\r\n\r\n  // 📝 회원가입 함수\r\n  const register = async (registerData) => {\r\n    dispatch({ type: 'REGISTER_START' });\r\n    \r\n    try {\r\n      console.log('📝 회원가입 요청 중:', { user_id: registerData.user_id });\r\n      \r\n      // 서버 상태 확인\r\n      const healthResponse = await fetch('https://quinors-lv-backend.ngrok.io/api/health');\r\n      if (!healthResponse.ok) {\r\n        throw new Error('서버에 연결할 수 없습니다. 잠시 후 다시 시도해주세요.');\r\n      }\r\n\r\n      // 회원가입 API 호출\r\n      const response = await fetch('https://quinors-lv-backend.ngrok.io/api/auth/register', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Accept': 'application/json'\r\n        },\r\n        body: JSON.stringify(registerData)\r\n      });\r\n\r\n      const contentType = response.headers.get('content-type');\r\n      if (!contentType || !contentType.includes('application/json')) {\r\n        throw new Error('서버에서 올바르지 않은 응답을 받았습니다. 관리자에게 문의하세요.');\r\n      }\r\n\r\n      const result = await response.json();\r\n      console.log('📋 회원가입 응답 확인:', result);\r\n\r\n      if (response.ok && result.success) {\r\n        dispatch({ type: 'REGISTER_SUCCESS' });\r\n        console.log('✅ 회원가입 신청 완료:', registerData.user_id);\r\n        return result;\r\n      } else {\r\n        const errorMessage = result.message || '회원가입 처리 중 오류가 발생했습니다.';\r\n        throw new Error(errorMessage);\r\n      }\r\n\r\n    } catch (error) {\r\n      console.error('❌ 회원가입 실패:', error);\r\n      \r\n      let errorMessage = error.message;\r\n      \r\n      if (error.message.includes('Failed to fetch')) {\r\n        errorMessage = '서버에 연결할 수 없습니다.\\n• 인터넷 연결을 확인해주세요\\n• 잠시 후 다시 시도해주세요';\r\n      } else if (error.message.includes('duplicate') || error.message.includes('중복')) {\r\n        errorMessage = '이미 사용 중인 정보입니다.\\n다른 정보를 사용해주세요.';\r\n      }\r\n\r\n      dispatch({\r\n        type: 'REGISTER_FAILURE',\r\n        payload: errorMessage\r\n      });\r\n      \r\n      throw new Error(errorMessage);\r\n    }\r\n  };\r\n\r\n  // 🚪 로그아웃 함수\r\n  const logout = () => {\r\n    localStorage.removeItem('authToken');\r\n    localStorage.removeItem('userInfo');\r\n    sessionStorage.removeItem('authToken');\r\n    sessionStorage.removeItem('userInfo');\r\n    \r\n    dispatch({ type: 'LOGOUT' });\r\n    console.log('🚪 로그아웃 완료');\r\n  };\r\n\r\n  // ❌ 에러 초기화 함수\r\n  const clearError = () => {\r\n    dispatch({ type: 'CLEAR_ERROR' });\r\n  };\r\n\r\n  // Context value\r\n  const contextValue = {\r\n    // 상태\r\n    ...state,\r\n    \r\n    // 함수들\r\n    login,\r\n    register,\r\n    logout,\r\n    clearError,\r\n    \r\n    // 유틸리티\r\n    isLoggedIn: state.isAuthenticated && state.user && state.token,\r\n    userRole: state.user?.role || 'user',\r\n    userId: state.user?.user_id || null,\r\n    userName: state.user?.charge_name || state.user?.user_id || null,\r\n    isAdmin: state.user?.role === 'admin'\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={contextValue}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\n// Hook\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  if (!context) {\r\n    throw new Error('useAuth는 AuthProvider 내부에서만 사용할 수 있습니다.');\r\n  }\r\n  return context;\r\n};\r\n\r\nexport default AuthContext;"],"mappings":";;;AAAA;AACA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,UAAU,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEhF,MAAMC,WAAW,gBAAGN,aAAa,CAAC,CAAC;AAEnC,MAAMO,YAAY,GAAG;EACnBC,eAAe,EAAE,KAAK;EACtBC,IAAI,EAAE,IAAI;EACVC,OAAO,EAAE,KAAK;EACdC,KAAK,EAAE,IAAI;EACXC,KAAK,EAAE;AACT,CAAC;AAED,MAAMC,WAAW,GAAGA,CAACC,KAAK,EAAEC,MAAM,KAAK;EACrC,QAAQA,MAAM,CAACC,IAAI;IACjB,KAAK,aAAa;IAClB,KAAK,gBAAgB;MACnB,OAAO;QAAE,GAAGF,KAAK;QAAEJ,OAAO,EAAE,IAAI;QAAEC,KAAK,EAAE;MAAK,CAAC;IAEjD,KAAK,eAAe;MAClB,OAAO;QACL,GAAGG,KAAK;QACRN,eAAe,EAAE,IAAI;QACrBC,IAAI,EAAEM,MAAM,CAACE,OAAO,CAACR,IAAI;QACzBG,KAAK,EAAEG,MAAM,CAACE,OAAO,CAACL,KAAK;QAC3BF,OAAO,EAAE,KAAK;QACdC,KAAK,EAAE;MACT,CAAC;IAEH,KAAK,eAAe;IACpB,KAAK,kBAAkB;MACrB,OAAO;QACL,GAAGG,KAAK;QACRN,eAAe,EAAE,KAAK;QACtBC,IAAI,EAAE,IAAI;QACVG,KAAK,EAAE,IAAI;QACXF,OAAO,EAAE,KAAK;QACdC,KAAK,EAAEI,MAAM,CAACE;MAChB,CAAC;IAEH,KAAK,kBAAkB;MACrB,OAAO;QAAE,GAAGH,KAAK;QAAEJ,OAAO,EAAE,KAAK;QAAEC,KAAK,EAAE;MAAK,CAAC;IAElD,KAAK,QAAQ;MACX,OAAO;QACL,GAAGG,KAAK;QACRN,eAAe,EAAE,KAAK;QACtBC,IAAI,EAAE,IAAI;QACVG,KAAK,EAAE,IAAI;QACXF,OAAO,EAAE,KAAK;QACdC,KAAK,EAAE;MACT,CAAC;IAEH,KAAK,iBAAiB;MACpB,OAAO;QACL,GAAGG,KAAK;QACRN,eAAe,EAAE,IAAI;QACrBC,IAAI,EAAEM,MAAM,CAACE,OAAO,CAACR,IAAI;QACzBG,KAAK,EAAEG,MAAM,CAACE,OAAO,CAACL,KAAK;QAC3BF,OAAO,EAAE;MACX,CAAC;IAEH,KAAK,aAAa;MAChB,OAAO;QAAE,GAAGI,KAAK;QAAEH,KAAK,EAAE;MAAK,CAAC;IAElC;MACE,OAAOG,KAAK;EAChB;AACF,CAAC;AAED,OAAO,MAAMI,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAAA,IAAAC,WAAA,EAAAC,YAAA,EAAAC,YAAA,EAAAC,YAAA,EAAAC,YAAA;EAC5C,MAAM,CAACX,KAAK,EAAEY,QAAQ,CAAC,GAAGxB,UAAU,CAACW,WAAW,EAAEN,YAAY,CAAC;;EAE/D;EACAJ,SAAS,CAAC,MAAM;IACd,MAAMS,KAAK,GAAGe,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC;IAC/C,MAAMC,QAAQ,GAAGF,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC;IAEjD,IAAIhB,KAAK,IAAIiB,QAAQ,EAAE;MACrB,IAAI;QACF,MAAMC,cAAc,GAAGC,IAAI,CAACC,KAAK,CAACH,QAAQ,CAAC;QAC3CH,QAAQ,CAAC;UACPV,IAAI,EAAE,iBAAiB;UACvBC,OAAO,EAAE;YACPR,IAAI,EAAEqB,cAAc;YACpBlB,KAAK,EAAEA;UACT;QACF,CAAC,CAAC;QACFqB,OAAO,CAACC,GAAG,CAAC,aAAa,EAAEJ,cAAc,CAACK,WAAW,IAAIL,cAAc,CAACM,OAAO,CAAC;MAClF,CAAC,CAAC,OAAOzB,KAAK,EAAE;QACdsB,OAAO,CAACtB,KAAK,CAAC,kBAAkB,EAAEA,KAAK,CAAC;QACxCgB,YAAY,CAACU,UAAU,CAAC,WAAW,CAAC;QACpCV,YAAY,CAACU,UAAU,CAAC,UAAU,CAAC;MACrC;IACF;EACF,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMC,KAAK,GAAG,MAAOC,WAAW,IAAK;IACnCb,QAAQ,CAAC;MAAEV,IAAI,EAAE;IAAc,CAAC,CAAC;IAEjC,IAAI;MACFiB,OAAO,CAACC,GAAG,CAAC,cAAc,EAAE;QAAEE,OAAO,EAAEG,WAAW,CAACC;MAAS,CAAC,CAAC;;MAE9D;MACA,MAAMC,cAAc,GAAG,MAAMC,KAAK,CAAC,gDAAgD,CAAC;MACpF,IAAI,CAACD,cAAc,CAACE,EAAE,EAAE;QACtB,MAAM,IAAIC,KAAK,CAAC,iCAAiC,CAAC;MACpD;;MAEA;MACA,MAAMC,QAAQ,GAAG,MAAMH,KAAK,CAAC,oDAAoD,EAAE;QACjFI,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE,kBAAkB;UAClC,QAAQ,EAAE;QACZ,CAAC;QACDC,IAAI,EAAEjB,IAAI,CAACkB,SAAS,CAAC;UACnBb,OAAO,EAAEG,WAAW,CAACC,QAAQ;UAC7BU,QAAQ,EAAEX,WAAW,CAACW,QAAQ;UAC9BC,UAAU,EAAEZ,WAAW,CAACY,UAAU,IAAI;QACxC,CAAC;MACH,CAAC,CAAC;MAEF,MAAMC,WAAW,GAAGP,QAAQ,CAACE,OAAO,CAACM,GAAG,CAAC,cAAc,CAAC;MACxD,IAAI,CAACD,WAAW,IAAI,CAACA,WAAW,CAACE,QAAQ,CAAC,kBAAkB,CAAC,EAAE;QAC7D,MAAM,IAAIV,KAAK,CAAC,sCAAsC,CAAC;MACzD;MAEA,MAAMW,MAAM,GAAG,MAAMV,QAAQ,CAACW,IAAI,CAAC,CAAC;MACpCvB,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEqB,MAAM,CAAC;MAEpC,IAAIV,QAAQ,CAACF,EAAE,IAAIY,MAAM,CAACE,OAAO,EAAE;QACjC,MAAM;UAAEhD,IAAI;UAAEG;QAAM,CAAC,GAAG2C,MAAM,CAACG,IAAI;;QAEnC;QACA,IAAInB,WAAW,CAACY,UAAU,EAAE;UAC1BxB,YAAY,CAACgC,OAAO,CAAC,WAAW,EAAE/C,KAAK,CAAC;UACxCe,YAAY,CAACgC,OAAO,CAAC,UAAU,EAAE5B,IAAI,CAACkB,SAAS,CAACxC,IAAI,CAAC,CAAC;QACxD,CAAC,MAAM;UACLmD,cAAc,CAACD,OAAO,CAAC,WAAW,EAAE/C,KAAK,CAAC;UAC1CgD,cAAc,CAACD,OAAO,CAAC,UAAU,EAAE5B,IAAI,CAACkB,SAAS,CAACxC,IAAI,CAAC,CAAC;QAC1D;QAEAiB,QAAQ,CAAC;UACPV,IAAI,EAAE,eAAe;UACrBC,OAAO,EAAE;YAAER,IAAI;YAAEG;UAAM;QACzB,CAAC,CAAC;QAEFqB,OAAO,CAACC,GAAG,CAAC,WAAW,EAAEzB,IAAI,CAAC0B,WAAW,IAAI1B,IAAI,CAAC2B,OAAO,CAAC;MAC5D,CAAC,MAAM;QACL,MAAMyB,YAAY,GAAGN,MAAM,CAACO,OAAO,IAAI,yBAAyB;QAChE,MAAM,IAAIlB,KAAK,CAACiB,YAAY,CAAC;MAC/B;IAEF,CAAC,CAAC,OAAOlD,KAAK,EAAE;MACdsB,OAAO,CAACtB,KAAK,CAAC,WAAW,EAAEA,KAAK,CAAC;MAEjC,IAAIkD,YAAY,GAAGlD,KAAK,CAACmD,OAAO;MAEhC,IAAInD,KAAK,CAACmD,OAAO,CAACR,QAAQ,CAAC,iBAAiB,CAAC,IAAI3C,KAAK,CAACmD,OAAO,CAACR,QAAQ,CAAC,wBAAwB,CAAC,EAAE;QACjGO,YAAY,GAAG,wEAAwE;MACzF,CAAC,MAAM,IAAIlD,KAAK,CAACmD,OAAO,CAACR,QAAQ,CAAC,MAAM,CAAC,EAAE;QACzCO,YAAY,GAAG,uCAAuC;MACxD;MAEAnC,QAAQ,CAAC;QACPV,IAAI,EAAE,eAAe;QACrBC,OAAO,EAAE4C;MACX,CAAC,CAAC;MAEF,MAAM,IAAIjB,KAAK,CAACiB,YAAY,CAAC;IAC/B;EACF,CAAC;;EAED;EACA,MAAME,QAAQ,GAAG,MAAOC,YAAY,IAAK;IACvCtC,QAAQ,CAAC;MAAEV,IAAI,EAAE;IAAiB,CAAC,CAAC;IAEpC,IAAI;MACFiB,OAAO,CAACC,GAAG,CAAC,eAAe,EAAE;QAAEE,OAAO,EAAE4B,YAAY,CAAC5B;MAAQ,CAAC,CAAC;;MAE/D;MACA,MAAMK,cAAc,GAAG,MAAMC,KAAK,CAAC,gDAAgD,CAAC;MACpF,IAAI,CAACD,cAAc,CAACE,EAAE,EAAE;QACtB,MAAM,IAAIC,KAAK,CAAC,iCAAiC,CAAC;MACpD;;MAEA;MACA,MAAMC,QAAQ,GAAG,MAAMH,KAAK,CAAC,uDAAuD,EAAE;QACpFI,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE,kBAAkB;UAClC,QAAQ,EAAE;QACZ,CAAC;QACDC,IAAI,EAAEjB,IAAI,CAACkB,SAAS,CAACe,YAAY;MACnC,CAAC,CAAC;MAEF,MAAMZ,WAAW,GAAGP,QAAQ,CAACE,OAAO,CAACM,GAAG,CAAC,cAAc,CAAC;MACxD,IAAI,CAACD,WAAW,IAAI,CAACA,WAAW,CAACE,QAAQ,CAAC,kBAAkB,CAAC,EAAE;QAC7D,MAAM,IAAIV,KAAK,CAAC,sCAAsC,CAAC;MACzD;MAEA,MAAMW,MAAM,GAAG,MAAMV,QAAQ,CAACW,IAAI,CAAC,CAAC;MACpCvB,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEqB,MAAM,CAAC;MAErC,IAAIV,QAAQ,CAACF,EAAE,IAAIY,MAAM,CAACE,OAAO,EAAE;QACjC/B,QAAQ,CAAC;UAAEV,IAAI,EAAE;QAAmB,CAAC,CAAC;QACtCiB,OAAO,CAACC,GAAG,CAAC,eAAe,EAAE8B,YAAY,CAAC5B,OAAO,CAAC;QAClD,OAAOmB,MAAM;MACf,CAAC,MAAM;QACL,MAAMM,YAAY,GAAGN,MAAM,CAACO,OAAO,IAAI,uBAAuB;QAC9D,MAAM,IAAIlB,KAAK,CAACiB,YAAY,CAAC;MAC/B;IAEF,CAAC,CAAC,OAAOlD,KAAK,EAAE;MACdsB,OAAO,CAACtB,KAAK,CAAC,YAAY,EAAEA,KAAK,CAAC;MAElC,IAAIkD,YAAY,GAAGlD,KAAK,CAACmD,OAAO;MAEhC,IAAInD,KAAK,CAACmD,OAAO,CAACR,QAAQ,CAAC,iBAAiB,CAAC,EAAE;QAC7CO,YAAY,GAAG,qDAAqD;MACtE,CAAC,MAAM,IAAIlD,KAAK,CAACmD,OAAO,CAACR,QAAQ,CAAC,WAAW,CAAC,IAAI3C,KAAK,CAACmD,OAAO,CAACR,QAAQ,CAAC,IAAI,CAAC,EAAE;QAC9EO,YAAY,GAAG,iCAAiC;MAClD;MAEAnC,QAAQ,CAAC;QACPV,IAAI,EAAE,kBAAkB;QACxBC,OAAO,EAAE4C;MACX,CAAC,CAAC;MAEF,MAAM,IAAIjB,KAAK,CAACiB,YAAY,CAAC;IAC/B;EACF,CAAC;;EAED;EACA,MAAMI,MAAM,GAAGA,CAAA,KAAM;IACnBtC,YAAY,CAACU,UAAU,CAAC,WAAW,CAAC;IACpCV,YAAY,CAACU,UAAU,CAAC,UAAU,CAAC;IACnCuB,cAAc,CAACvB,UAAU,CAAC,WAAW,CAAC;IACtCuB,cAAc,CAACvB,UAAU,CAAC,UAAU,CAAC;IAErCX,QAAQ,CAAC;MAAEV,IAAI,EAAE;IAAS,CAAC,CAAC;IAC5BiB,OAAO,CAACC,GAAG,CAAC,YAAY,CAAC;EAC3B,CAAC;;EAED;EACA,MAAMgC,UAAU,GAAGA,CAAA,KAAM;IACvBxC,QAAQ,CAAC;MAAEV,IAAI,EAAE;IAAc,CAAC,CAAC;EACnC,CAAC;;EAED;EACA,MAAMmD,YAAY,GAAG;IACnB;IACA,GAAGrD,KAAK;IAER;IACAwB,KAAK;IACLyB,QAAQ;IACRE,MAAM;IACNC,UAAU;IAEV;IACAE,UAAU,EAAEtD,KAAK,CAACN,eAAe,IAAIM,KAAK,CAACL,IAAI,IAAIK,KAAK,CAACF,KAAK;IAC9DyD,QAAQ,EAAE,EAAAhD,WAAA,GAAAP,KAAK,CAACL,IAAI,cAAAY,WAAA,uBAAVA,WAAA,CAAYiD,IAAI,KAAI,MAAM;IACpCC,MAAM,EAAE,EAAAjD,YAAA,GAAAR,KAAK,CAACL,IAAI,cAAAa,YAAA,uBAAVA,YAAA,CAAYc,OAAO,KAAI,IAAI;IACnCoC,QAAQ,EAAE,EAAAjD,YAAA,GAAAT,KAAK,CAACL,IAAI,cAAAc,YAAA,uBAAVA,YAAA,CAAYY,WAAW,OAAAX,YAAA,GAAIV,KAAK,CAACL,IAAI,cAAAe,YAAA,uBAAVA,YAAA,CAAYY,OAAO,KAAI,IAAI;IAChEqC,OAAO,EAAE,EAAAhD,YAAA,GAAAX,KAAK,CAACL,IAAI,cAAAgB,YAAA,uBAAVA,YAAA,CAAY6C,IAAI,MAAK;EAChC,CAAC;EAED,oBACEjE,OAAA,CAACC,WAAW,CAACoE,QAAQ;IAACC,KAAK,EAAER,YAAa;IAAAhD,QAAA,EACvCA;EAAQ;IAAAyD,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B,CAAC;;AAED;AAAA3D,EAAA,CA/MaF,YAAY;AAAA8D,EAAA,GAAZ9D,YAAY;AAgNzB,OAAO,MAAM+D,OAAO,GAAGA,CAAA,KAAM;EAAAC,GAAA;EAC3B,MAAMC,OAAO,GAAGlF,UAAU,CAACK,WAAW,CAAC;EACvC,IAAI,CAAC6E,OAAO,EAAE;IACZ,MAAM,IAAIvC,KAAK,CAAC,yCAAyC,CAAC;EAC5D;EACA,OAAOuC,OAAO;AAChB,CAAC;AAACD,GAAA,CANWD,OAAO;AAQpB,eAAe3E,WAAW;AAAC,IAAA0E,EAAA;AAAAI,YAAA,CAAAJ,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}