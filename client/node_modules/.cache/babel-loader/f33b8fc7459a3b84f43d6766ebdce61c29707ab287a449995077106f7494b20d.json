{"ast":null,"code":"class AddressService {\n  constructor() {\n    this.API_BASE_URL = process.env.NODE_ENV === 'production' ? 'https://quinors-lv-backend.ngrok.io/api' : 'https://quinors-lv-backend.ngrok.io/api';\n  }\n\n  // 접수 API용 행정동 변환 (카카오 API 사용)\n  async convertToAdminDong(roadAddress) {\n    try {\n      if (!roadAddress || typeof roadAddress !== 'string') {\n        throw new Error('유효하지 않은 주소입니다');\n      }\n      console.log('🔄 카카오 API 주소 변환 시작:', roadAddress);\n      const response = await fetch(`${this.API_BASE_URL}/address/convert-to-dong`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          roadAddress: roadAddress.trim()\n        })\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.error || `API 호출 실패 (${response.status})`);\n      }\n      const result = await response.json();\n      if (result.success && result.data) {\n        console.log('✅ 주소 변환 성공:', result.data);\n        return {\n          success: true,\n          original: result.data.original,\n          converted: result.data.converted,\n          // 접수 API용 간단한 주소\n          dongAddress: result.data.converted.fullDongAddress,\n          // 상세 정보\n          details: {\n            sido: result.data.converted.sido,\n            sigungu: result.data.converted.sigungu,\n            adminDong: result.data.converted.adminDong,\n            legalDong: result.data.converted.legalDong,\n            coordinates: result.data.converted.coordinates\n          },\n          kakaoData: result.data.kakaoData\n        };\n      } else {\n        throw new Error(result.error || '주소 변환에 실패했습니다');\n      }\n    } catch (error) {\n      console.error('❌ 주소 변환 실패:', error);\n      return {\n        success: false,\n        error: error.message,\n        original: roadAddress,\n        dongAddress: roadAddress,\n        // fallback으로 원본 주소 사용\n        converted: null\n      };\n    }\n  }\n\n  // 주소 검색 (자동완성용)\n  async searchAddress(query) {\n    try {\n      if (!query || query.trim().length < 2) {\n        return {\n          success: true,\n          data: []\n        };\n      }\n      const response = await fetch(`${this.API_BASE_URL}/address/search`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          query: query.trim(),\n          limit: 5\n        })\n      });\n      const result = await response.json();\n      if (result.success) {\n        return {\n          success: true,\n          data: result.data || []\n        };\n      }\n      return {\n        success: false,\n        data: [],\n        error: result.error\n      };\n    } catch (error) {\n      console.error('❌ 주소 검색 실패:', error);\n      return {\n        success: false,\n        data: [],\n        error: error.message\n      };\n    }\n  }\n\n  // API 연결 테스트\n  async testKakaoAPI() {\n    try {\n      const response = await fetch(`${this.API_BASE_URL}/address/test-kakao`);\n      const result = await response.json();\n      return result;\n    } catch (error) {\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  }\n}\nexport default new AddressService();","map":{"version":3,"names":["AddressService","constructor","API_BASE_URL","process","env","NODE_ENV","convertToAdminDong","roadAddress","Error","console","log","response","fetch","method","headers","body","JSON","stringify","trim","ok","errorData","json","error","status","result","success","data","original","converted","dongAddress","fullDongAddress","details","sido","sigungu","adminDong","legalDong","coordinates","kakaoData","message","searchAddress","query","length","limit","testKakaoAPI"],"sources":["C:/project/quinorslv/quinors-app-frontend/client/src/services/addressService.js"],"sourcesContent":["class AddressService {\r\n  constructor() {\r\n    this.API_BASE_URL = process.env.NODE_ENV === 'production' \r\n      ? 'https://quinors-lv-backend.ngrok.io/api'\r\n      : 'https://quinors-lv-backend.ngrok.io/api';\r\n  }\r\n\r\n  // 접수 API용 행정동 변환 (카카오 API 사용)\r\n  async convertToAdminDong(roadAddress) {\r\n    try {\r\n      if (!roadAddress || typeof roadAddress !== 'string') {\r\n        throw new Error('유효하지 않은 주소입니다');\r\n      }\r\n\r\n      console.log('🔄 카카오 API 주소 변환 시작:', roadAddress);\r\n      \r\n      const response = await fetch(`${this.API_BASE_URL}/address/convert-to-dong`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          roadAddress: roadAddress.trim()\r\n        })\r\n      });\r\n\r\n      if (!response.ok) {\r\n        const errorData = await response.json();\r\n        throw new Error(errorData.error || `API 호출 실패 (${response.status})`);\r\n      }\r\n\r\n      const result = await response.json();\r\n      \r\n      if (result.success && result.data) {\r\n        console.log('✅ 주소 변환 성공:', result.data);\r\n        \r\n        return {\r\n          success: true,\r\n          original: result.data.original,\r\n          converted: result.data.converted,\r\n          // 접수 API용 간단한 주소\r\n          dongAddress: result.data.converted.fullDongAddress,\r\n          // 상세 정보\r\n          details: {\r\n            sido: result.data.converted.sido,\r\n            sigungu: result.data.converted.sigungu,\r\n            adminDong: result.data.converted.adminDong,\r\n            legalDong: result.data.converted.legalDong,\r\n            coordinates: result.data.converted.coordinates\r\n          },\r\n          kakaoData: result.data.kakaoData\r\n        };\r\n      } else {\r\n        throw new Error(result.error || '주소 변환에 실패했습니다');\r\n      }\r\n      \r\n    } catch (error) {\r\n      console.error('❌ 주소 변환 실패:', error);\r\n      return {\r\n        success: false,\r\n        error: error.message,\r\n        original: roadAddress,\r\n        dongAddress: roadAddress, // fallback으로 원본 주소 사용\r\n        converted: null\r\n      };\r\n    }\r\n  }\r\n\r\n  // 주소 검색 (자동완성용)\r\n  async searchAddress(query) {\r\n    try {\r\n      if (!query || query.trim().length < 2) {\r\n        return { success: true, data: [] };\r\n      }\r\n\r\n      const response = await fetch(`${this.API_BASE_URL}/address/search`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          query: query.trim(),\r\n          limit: 5\r\n        })\r\n      });\r\n\r\n      const result = await response.json();\r\n      \r\n      if (result.success) {\r\n        return {\r\n          success: true,\r\n          data: result.data || []\r\n        };\r\n      }\r\n      \r\n      return { success: false, data: [], error: result.error };\r\n      \r\n    } catch (error) {\r\n      console.error('❌ 주소 검색 실패:', error);\r\n      return { success: false, data: [], error: error.message };\r\n    }\r\n  }\r\n\r\n  // API 연결 테스트\r\n  async testKakaoAPI() {\r\n    try {\r\n      const response = await fetch(`${this.API_BASE_URL}/address/test-kakao`);\r\n      const result = await response.json();\r\n      return result;\r\n    } catch (error) {\r\n      return { success: false, error: error.message };\r\n    }\r\n  }\r\n}\r\n\r\nexport default new AddressService();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}